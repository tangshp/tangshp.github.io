<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python-01</title>
      <link href="/2021/09/29/python-01/"/>
      <url>/2021/09/29/python-01/</url>
      
        <content type="html"><![CDATA[<h1 id="python的基本工具"><a href="#python的基本工具" class="headerlink" title="python的基本工具"></a>python的基本工具</h1><h2 id="pip3"><a href="#pip3" class="headerlink" title="pip3"></a>pip3</h2><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall python3-pip</span><br></pre></td></tr></table></figure><ul><li>查看库路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ➜  ~ pip3 show numpy</span><br><span class="line">Name: numpy</span><br><span class="line">Version: 1.21.2</span><br><span class="line">Summary: NumPy is the fundamental package <span class="keyword">for</span> array computing with Python.</span><br><span class="line">Home-page: https://www.numpy.org</span><br><span class="line">Author: Travis E. Oliphant et al.</span><br><span class="line">Author-email: None</span><br><span class="line">License: BSD</span><br><span class="line">Location: /usr/<span class="built_in">local</span>/lib/python3.8/dist-packages</span><br><span class="line">Requires:</span><br><span class="line">Required-by:</span><br></pre></td></tr></table></figure></li></ul></li><li><p>更换下载源<br>常用下载源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">华中理工大学：http://pypi.hustunique.com/</span><br><span class="line"></span><br><span class="line">山东理工大学：http://pypi.sdutlinux.org/ </span><br><span class="line"></span><br><span class="line">豆瓣：http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><p>** 临时更换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pyspider</span><br></pre></td></tr></table></figure><p>** 一劳永逸<br>修改<code>~/.pip/pip.conf</code> (没有就创建一个文件夹及文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout =6000</span><br><span class="line">index-url =http://pypi.douban.com/simple/</span><br><span class="line">[install]</span><br><span class="line">use-mirrors =<span class="literal">true</span></span><br><span class="line">mirrors =http://pypi.douban.com/simple/</span><br><span class="line">trusted-host =pypi.douban.com</span><br></pre></td></tr></table></figure></li></ul><h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><h2 id="Times-New-Roman字体问题"><a href="#Times-New-Roman字体问题" class="headerlink" title="Times New Roman字体问题"></a><code>Times New Roman</code>字体问题</h2><ul><li>使用<code>Times New Roman</code>时, 报找不到 [‘Times New Roman’]的错误<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.ylabel(<span class="string">&#x27;Clocks($\mu S$)&#x27;</span>, fontdict=&#123;<span class="string">&#x27;family&#x27;</span> : <span class="string">&#x27;Times New Roman&#x27;</span>, <span class="string">&#x27;size&#x27;</span>   : <span class="number">16</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findfont: Font family [<span class="string">&#x27;Times New Roman&#x27;</span>] not found. Falling back to DejaVu Sans.</span><br></pre></td></tr></table></figure></li><li>解决方法:<br>** 把<code>windows</code>中<code>C:\Windows\Fonts</code>的<code>Times New Roman</code>字体拷贝到以下路径中(使用<code>pip3 show matplotlib</code>查看<code>matplotlib</code>的安装路径)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls ./time*</span><br><span class="line">./timesbd.ttf  ./timesbi.ttf  ./timesi.ttf  ./times.ttf</span><br><span class="line">sudo cp ./<span class="built_in">times</span>* /usr/<span class="built_in">local</span>/lib/python3.8/dist-packages/matplotlib/mpl-data/fonts/ttf</span><br></pre></td></tr></table></figure>** 删除matplotlib的缓存:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.cache/matplotlib</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程-02-操作系统</title>
      <link href="/2021/09/24/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-02-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/09/24/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-02-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的位数与内存指针"><a href="#操作系统的位数与内存指针" class="headerlink" title="操作系统的位数与内存指针"></a>操作系统的位数与内存指针</h1><p> cpu不能直接访问硬盘的数据呢, 只能通过把硬盘的数据先放到内存里, 然后再从内存里访问硬盘的数据, 所以<code>内存才是计算机系统的主存储器,而硬盘是、光盘、u盘一类都是外部存储器</code>;</p><p> 实际上内存是把8个8个bit排成1组, 每1组成为1个单位, 大小是1 byte(字节), cpu每一次只能访问1个byte, 而不能单独去访问具体的1个小格子(bit),<code>1个byte字节就是内存的最小的IO单位</code>;如下图所示:<br> <img src="/images/memory.png" alt="memory"></p><p><strong>计算机操作系统</strong>会给内存每1个字节分配1个内存地址, <code>cpu</code>只需要知道某个数据类型的地址, 就可以直接去到内存地址中去提取数据了</p><ul><li><p>直接寻址技术<br>假如你知道你要找的人住在那栋大楼的17楼 1702, 但是你还是需要从1楼走到17楼去找他, 这个过程还是需要时间成本的。但是如果你具有了直接寻址技术,  就能直接跳到17楼 1702门前,  如果你找的下1个人在2楼, 又能从17楼直接跳到2楼, 而直接寻址技术已经成为当代计算机软硬件的标准技术之一, 也就是说只要cpu知道要访问数据的内存地址, 就能直接到内存的对应位置去访问数据!</p></li><li><p>内存地址的表示方式<br>跟门牌号一样, 其实内存地址也是由1个2进制数字来表示的; 每1个地址对应内存里的1个<code>byte</code>字节, 如果地址的值加1, 那么这个地址就对应下1个字节了;在32位操作系统中, 总线有32根，根据每根高低电平的不同可以有2的32次方次不同情况, 所以32位的地址范围就是从<br><code>0000 0000 0000 0000 0000 0000 0000 0000</code><br>到<br><code>1111 1111 1111 1111 1111 1111 1111 1111</code></p><p>64位系统的内存地址是64位的二进制数, 也就是<code>4G × 4G</code>个地址; </p><ul><li>关于指针<br>指针是用来存放内存地址的, 那么对于32位系统来讲,内存地址是1个32位长度的2进制数, 而每1个内存单位长度只有1 byte = 8 bit(位),所以1个指针就需要4byte的内存来存放该指针的内容; 同理64位操作系统也就需要8bytes的内容来存放指针的内容了。</li></ul></li></ul><h1 id="冯-诺依曼结构"><a href="#冯-诺依曼结构" class="headerlink" title="冯 * 诺依曼结构"></a>冯 * 诺依曼结构</h1><h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><script type="math/tex; mode=display">    \begin{pmatrix}    y_1 \\    y_2 \\    ...\\    y_{MAX} \\    \end{pmatrix}    =    \begin{pmatrix}    a_{11} & a_{12} & ... & a_{1*MAX} \\    a_{21} & a_{22} & ... & a_{2*MAX} \\    ...    &  ...   & ... & ...         \\    a_{MAX*1} & a_{MAX*2} & ... & a_{MAX*MAX} \\    \end{pmatrix}    *    \begin{pmatrix}    x_1 \\    x_2 \\    ...\\    x_{MAX} \\    \end{pmatrix}</script><ul><li>初始化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST_TIMES 300</span></span><br><span class="line"><span class="keyword">double</span> A[MAX][MAX], x[MAX], y[MAX];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; MAX; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i][j] = rand() / RAND_MAX * <span class="number">100.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x[i] = rand() / RAND_MAX * <span class="number">100.0</span>;</span><br><span class="line">    y[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>算法1<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; MAX; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        y[i] += A[i][j] * x[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>算法2<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; MAX; j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        y[i] += A[i][j] * x[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>用时对比<br>算法1和算法2的对比用时<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use time: 11.288730 ms.</span><br><span class="line">use time: 24.910040 ms.</span><br></pre></td></tr></table></figure><br><img src="/images/cache_test.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程-01-字符串处理</title>
      <link href="/2021/09/20/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-01-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
      <url>/2021/09/20/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-01-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="strcpy和strdup"><a href="#strcpy和strdup" class="headerlink" title="strcpy和strdup"></a>strcpy和strdup</h1><p><code>strcpy</code>和<code>strdup</code>都是拷贝字符串的内容(<code>duplicate a string</code>)<br>1.函数声明对比<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strdup</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line">----------------------------</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;</span><br></pre></td></tr></table></figure><br>2.使用对比<br>使用<code>strcpy</code>之前必须为<code>dest</code>分配足够的内存;而<code>strdup</code>内部实现了内存的分配</p><p>3.示例<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> src[] = <span class="string">&quot;compare strdup to strcpy.&quot;</span>;</span><br><span class="line"><span class="keyword">size_t</span> len = <span class="keyword">sizeof</span>(src);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *dest_cpy = <span class="literal">NULL</span>;</span><br><span class="line">dest_cpy = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len); <span class="comment">// 内存分配</span></span><br><span class="line"><span class="built_in">strcpy</span>(dest_cpy, src);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dest_src:[%s]\n&quot;</span>, dest_cpy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *dest_dup = <span class="literal">NULL</span>;</span><br><span class="line">dest_dup = strdup(src);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dest_dup:[%s]\n&quot;</span>, dest_dup);</span><br></pre></td></tr></table></figure></p><h1 id="malloc-alloc-remalloc-free"><a href="#malloc-alloc-remalloc-free" class="headerlink" title="malloc, alloc, remalloc, free"></a>malloc, alloc, remalloc, free</h1><p>这四个函数在<code>stdlib.h</code>中被声明<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">size_t</span> nmemb, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure></p><ul><li>区别<br>1.<code>malloc</code>分配指定字节数<code>size</code>的存储区, <code>此存储区中的初始值不确定</code><br>2.<code>alloc</code>向内存池申请<code>nmemb</code>个大小为<code>size</code>的内存区域, <code>并给内存区域填充0</code><br>3.<code>realloc</code>被用作重新分配内存;<br>3.1.<code>原来的内存块可以扩大缩小, 则原地址ptr和返回地址值相等; 如果是缩小一块内存块，则将该内存块的后半部分直接拿掉，剩余部分内存块及其内容保留; 如果是扩大一个内存块，则将原来的内存块保留在他的后边新增一块内存块（但是新增的内存块并未初始化）</code><br>3.2.<code>原来的内存块无法扩大缩小, realloc会重新开辟一个新的内存空间，并把原来的内存空间的内容拷贝到新的内存空间里(再调用完realloc后就不能使用指向就内存的指针ptr，而是用返回的新的指针。)</code></li></ul><h1 id="带颜色输出"><a href="#带颜色输出" class="headerlink" title="带颜色输出"></a>带颜色输出</h1><p><code>c</code>语言的<code>printf</code>和<code>shell</code>的<code>echo</code>和<code>printf</code>都可以遵循以下规则输出<br><img src="/images/color_print.png" alt="颜色输出"></p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">背景/字体颜色</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">背景颜色字符</td><td style="text-align:center">字体颜色字符</td><td style="text-align:center">颜色</td><td style="text-align:center">1,2,6</td><td style="text-align:center">意义</td></tr><tr><td style="text-align:center">40</td><td style="text-align:center">30</td><td style="text-align:center">黑</td><td style="text-align:center"><code>\033[0m</code></td><td style="text-align:center">关闭所有属性</td></tr><tr><td style="text-align:center">41</td><td style="text-align:center">31</td><td style="text-align:center">红</td><td style="text-align:center"><code>\033[1m</code></td><td style="text-align:center">设置高亮度</td></tr><tr><td style="text-align:center">42</td><td style="text-align:center">32</td><td style="text-align:center">绿</td><td style="text-align:center"><code>\033[4m</code></td><td style="text-align:center">下划线</td></tr><tr><td style="text-align:center">43</td><td style="text-align:center">33</td><td style="text-align:center">黄</td><td style="text-align:center"><code>\033[5m</code></td><td style="text-align:center">闪烁</td></tr><tr><td style="text-align:center">44</td><td style="text-align:center">34</td><td style="text-align:center">蓝</td><td style="text-align:center"><code>\033[7m</code></td><td style="text-align:center">反显</td></tr><tr><td style="text-align:center">45</td><td style="text-align:center">35</td><td style="text-align:center">蓝</td><td style="text-align:center"><code>\033[8m</code></td><td style="text-align:center">消隐</td></tr><tr><td style="text-align:center">46</td><td style="text-align:center">36</td><td style="text-align:center">深蓝</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">47</td><td style="text-align:center">37</td><td style="text-align:center">白色</td><td style="text-align:center"></td></tr></tbody></table></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  build <span class="built_in">echo</span> -n <span class="string">&quot;\033[5m\033[4m\033[40;34mhello,world\033[0m\n&quot;</span></span><br><span class="line">hello,world</span><br><span class="line">➜  build <span class="built_in">printf</span> <span class="string">&quot;\033[5m\033[4m\033[40;34mhello,world\033[0m\n&quot;</span></span><br><span class="line">hello,world</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[5m\033[4m\033[40;34mhello,world\033[0m\n&quot;</span>);</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_44519484/article/details/114242544?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON</title>
      <link href="/2021/09/20/JSON/"/>
      <url>/2021/09/20/JSON/</url>
      
        <content type="html"><![CDATA[<p>JSON(<code>JavaScrip Object Notation</code>) 是一种<code>轻量级的数据交换格式</code>。它基于 <code>ECMAScript</code> (欧洲计算机协会制定的 js 规范) 的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><p>关于上面的描述可以精简为一句话：<code>Json 是一种数据格式，和语言无关，在什么语言中都可以使用 Json</code>。基于这种通用的数据格式，一般处理两方面的任务：</p><p>组织数据（数据序列化），用于数据的网络传输<br>组织数据（数据序列化），写磁盘文件实现数据的持久化存储（一般以<code>.json</code> 作为文件后缀）<br>Json 中主要有两种数据格式：Json 数组和 Json 对象，并且这两种格式可以交叉嵌套使用，下面依次介绍下这两种数据格式：</p><h1 id="Json-数组"><a href="#Json-数组" class="headerlink" title="Json 数组"></a>Json 数组</h1><p>Json 数组使用 [] 表示，[] 里边是元素，元素和元素之间使用逗号间隔，最后一个元素后边没有逗号，一个 Json 数组中支持同时存在多种不同类型的成员，包括：<code>整形</code>、 <code>浮点</code>、 <code>字符串</code>、 <code>布尔类型</code>、 json数组、 <code>json对象</code>、 <code>空值-null</code>。由此可见 <code>Json</code> 数组比起 <code>C/C++</code> 数组要灵活很多。</p><ul><li><p>Json 数组中的元素数据类型一致</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整形</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">[<span class="string">&quot;luffy&quot;</span>, <span class="string">&quot;sanji&quot;</span>, <span class="string">&quot;zoro&quot;</span>, <span class="string">&quot;nami&quot;</span>, <span class="string">&quot;robin&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>Json 数组中的元素数据类型不一致</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">12</span>, <span class="number">13.34</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;hello,world&quot;</span>, <span class="literal">null</span>]</span><br></pre></td></tr></table></figure></li><li><p>Json 数组中的数组嵌套使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;panda&quot;</span>, <span class="string">&quot;beer&quot;</span>, <span class="string">&quot;rabbit&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;重庆&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;luffy&quot;</span>, <span class="string">&quot;boy&quot;</span>, <span class="number">19</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>Json 数组和对象嵌套使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;luffy&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:<span class="number">19</span>,</span><br><span class="line">            <span class="attr">&quot;father&quot;</span>:<span class="string">&quot;Monkey·D·Dragon&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;grandpa&quot;</span>:<span class="string">&quot;Monkey D Garp&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brother1&quot;</span>:<span class="string">&quot;Portgas D Ace&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brother2&quot;</span>:<span class="string">&quot;Sabo&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h1 id="Json-对象"><a href="#Json-对象" class="headerlink" title="Json 对象"></a>Json 对象</h1><p>Json 对象使用 {} 来描述，每个 Json 对象中可以存储若干个元素，每一个元素对应一个键值对（key：value 结构），元素和元素之间使用逗号间隔，最后一个元素后边没有逗号。对于每个元素中的键值对有以下细节需要注意：</p><p>键值（key）必须是字符串，位于同一层级的键值不要重复（因为是通过键值取出对应的 value 值）<br>value 值的类型是可选的，可根据实际需求指定，可用类型包括：<code>整形</code>、 <code>浮点</code>、 <code>字符串</code>、 <code>布尔类型</code>、 <code>json数组</code>、 <code>json对象</code>、 <code>空值-null</code>。<br>使用 Json 对象描述一个人的信息:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;Ace&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Sex&quot;</span>:<span class="string">&quot;man&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Age&quot;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">&quot;Family&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;Father&quot;</span>:<span class="string">&quot;Gol·D·Roger&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Mother&quot;</span>:<span class="string">&quot;Portgas·D·Rouge&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Brother&quot;</span>:[<span class="string">&quot;Sabo&quot;</span>, <span class="string">&quot;Monkey D. Luffy&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;IsAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;Comment&quot;</span>:<span class="string">&quot;yyds&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>通过上面的介绍可用看到，Json 的结构虽然简单，但是进行嵌套之后就可以描述很复杂的事情，在项目开发过程中往往需要我们根据实际需求自己定义 Json 格式用来存储项目数据。</p><p>另外，如果需要将 Json 数据持久化到磁盘文件中，需要注意一个问题：<code>在一个 Json 文件中只能有一个 Json 数组或者 Json 对象的根节点，不允许同时存储多个并列的根节点</code>。下面举例说明：</p><ul><li>错误的写法<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;luffy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:<span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;user&quot;</span>:<span class="string">&quot;ace&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;passwd&quot;</span>:<span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>错误原因：<code>在一个 Json 文件中有两个并列的 Json 根节点（并列包含 Json 对象和 Json 对象、Json 对象和 Json 数组、Json 数组和 Json 数组），根节点只能有一个。</code></li><li>正确的写法<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Name&quot;</span>:<span class="string">&quot;Ace&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Sex&quot;</span>:<span class="string">&quot;man&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Age&quot;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">&quot;Family&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;Father&quot;</span>:<span class="string">&quot;Gol·D·Roger&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Mother&quot;</span>:<span class="string">&quot;Portgas·D·Rouge&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Brother&quot;</span>:[<span class="string">&quot;Sabo&quot;</span>, <span class="string">&quot;Monkey D. Luffy&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;IsAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;Comment&quot;</span>:<span class="string">&quot;yyds&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>在上面的例子中通过Json对象以及Json数组的嵌套描述了一个人的身份信息，并且根节点只有一个就是Json对象，如果还需要使用Json数组或者Json对象描述其他信息，需要将这些信息写入到其他文件中，不要和这个Json对象并列写入到同一个文件里边，切记！！！</code></p>]]></content>
      
      
      <categories>
          
          <category> cJSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cJSON-01-cJSON的使用</title>
      <link href="/2021/09/20/cJSON-01-cJSON%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/09/20/cJSON-01-cJSON%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>cJSON是一个轻量级的使用c语言编写的JSON解析器;<br>本系列笔记以<a href="https://github.com/DaveGamble/cJSON">cJSON开源项目</a>为<code>JSON</code>解析库; <code>JSON</code>数据格式参考<a class="btn-beautify button--animated outline green larger" href="/2021/09/20/JSON/" title="JSON"><i class="far fa-hand-point-right"></i><span>JSON</span></a></p><h1 id="cJSON结构体"><a href="#cJSON结构体" class="headerlink" title="cJSON结构体"></a>cJSON结构体</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">prev</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">child</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *valuestring;</span><br><span class="line">    <span class="keyword">int</span> valueint;</span><br><span class="line">    <span class="keyword">double</span> valuedouble;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line">&#125; cJSON;</span><br></pre></td></tr></table></figure><h1 id="视频数据类型"><a href="#视频数据类型" class="headerlink" title="视频数据类型"></a>视频数据类型</h1><p>以如下视频数据类型为示例讲解一个简单的<code>cJSON</code>的使用与部分函数的实现过程<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Jack (\&quot;Bee\&quot;) Nimble&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;format&quot;</span>:       &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;rect&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;width&quot;</span>:        <span class="number">1920</span>,</span><br><span class="line">                <span class="attr">&quot;height&quot;</span>:       <span class="number">1080</span>,</span><br><span class="line">                <span class="attr">&quot;interlace&quot;</span>:    <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;frame rate&quot;</span>:   <span class="number">24</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="cJSON-CreateObject"><a href="#cJSON-CreateObject" class="headerlink" title="cJSON_CreateObject"></a>cJSON_CreateObject</h2><p><code>cJSON_CreateObject</code>创建了一个<code>json</code>对象<code>root</code><br>1.函数<code>cJSON_New_Item</code>给<code>cJSON</code>类型分配内存, 并初始化为0<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CJSON_PUBLIC(cJSON *)</span><br><span class="line">cJSON_CreateObject(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cJSON *item = cJSON_New_Item(&amp;global_hooks);</span><br><span class="line">    <span class="keyword">if</span> (item)&#123;</span><br><span class="line">        item-&gt;type = cJSON_Object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="value"><a href="#value" class="headerlink" title="value"></a>value</h2><p><code>&quot;name&quot;: &quot;Jack (\&quot;Bee\&quot;) Nimble&quot;</code>是一个<code>cJSON</code>数据类型, 使用<code>cJSON_CreateString(&quot;Jack (\&quot;Bee\&quot;) Nimble&quot;)</code>创建一个<code>cJSON</code>类型的数据;<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CJSON_PUBLIC(cJSON *)</span><br><span class="line">cJSON_CreateString(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>)&#123;</span><br><span class="line">    cJSON *item = cJSON_New_Item(&amp;global_hooks);</span><br><span class="line">    <span class="keyword">if</span> (item)&#123;</span><br><span class="line">        item-&gt;type = cJSON_String;</span><br><span class="line">        item-&gt;valuestring = (<span class="keyword">char</span> *)cJSON_strdup((<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">string</span>, &amp;global_hooks);</span><br><span class="line">        <span class="keyword">if</span> (!item-&gt;valuestring)&#123;</span><br><span class="line">            cJSON_Delete(item);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>1.函数<code>cJSON_New_Item</code>给<code>cJSON</code>类型分配内存, 并初始化为0<br>2.指定<code>type</code>为<code>cJSON_String</code><br>3.函数<code>cJSON_strdup</code>为指针<code>valuestring</code>分配内存, 并把<code>string</code>的字符拷贝给<code>valuestring</code><br>4.函数返回<code>cJSON</code>类型的指针<code>item</code></p><blockquote><p>此时<code>item</code>的<code>valuestring</code>和<code>type</code>已被初始化, 但键<code>key[string]</code>还没有初始化;即仅仅是<code>&quot;Jack (\&quot;Bee\&quot;) Nimble&quot;</code></p></blockquote><h2 id="绑定到root"><a href="#绑定到root" class="headerlink" title="绑定到root"></a>绑定到root</h2><p><code>cJSON_CreateString(&quot;Jack (\&quot;Bee\&quot;) Nimble&quot;)</code>创建了一对<code>key-value</code>(还没有设置<code>key</code>), 该<code>cJSON*</code>以<code>child</code>的身份存在于<code>root</code>中;</p><ul><li><p>调用<code>add_item_to_array</code>之前, 为<code>item</code>设定<code>key</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cJSON_AddItemToObject(root, <span class="string">&quot;name&quot;</span>, cJSON_CreateString(<span class="string">&quot;Jack (\&quot;Bee\&quot;) Nimble&quot;</span>));</span><br><span class="line"></span><br><span class="line">CJSON_PUBLIC(cJSON_bool)</span><br><span class="line">cJSON_AddItemToObject(cJSON *object, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>, cJSON *item)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> add_item_to_object(object, <span class="built_in">string</span>, item, &amp;global_hooks, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> cJSON_bool <span class="title">add_item_to_object</span><span class="params">(cJSON *<span class="keyword">const</span> object, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> <span class="built_in">string</span>, cJSON *<span class="keyword">const</span> item, \</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> internal_hooks *<span class="keyword">const</span> hooks, <span class="keyword">const</span> cJSON_bool constant_key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *new_key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> new_type = cJSON_Invalid;</span><br><span class="line">    <span class="comment">// 为key分配内存</span></span><br><span class="line">    new_key = (<span class="keyword">char</span> *)cJSON_strdup((<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">string</span>, hooks);</span><br><span class="line"></span><br><span class="line">    new_type = item-&gt;type &amp; ~cJSON_StringIsConst;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(item-&gt;type &amp; cJSON_StringIsConst) &amp;&amp; (item-&gt;<span class="built_in">string</span> != <span class="literal">NULL</span>))&#123;</span><br><span class="line">        hooks-&gt;deallocate(item-&gt;<span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    item-&gt;<span class="built_in">string</span> = new_key;</span><br><span class="line">    item-&gt;type = new_type;</span><br><span class="line">    <span class="keyword">return</span> add_item_to_array(object, item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>add_item_to_array</code><br>** <code>child</code>为空<br>当<code>child</code>为空时(第一次调用), 如图-<code>add_item_to_array_first</code>所示, 调用前灰色部分为空; 调用后非空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> cJSON_bool <span class="title">add_item_to_array</span><span class="params">(cJSON *<span class="built_in">array</span>, cJSON *item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cJSON *child = <span class="literal">NULL</span>;</span><br><span class="line">    child = <span class="built_in">array</span>-&gt;child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">/* list is empty, start new one */</span></span><br><span class="line">        <span class="built_in">array</span>-&gt;child = item;</span><br><span class="line">        item-&gt;prev = item;</span><br><span class="line">        item-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/* append to the end */</span></span><br><span class="line">        <span class="keyword">if</span> (child-&gt;prev)&#123;</span><br><span class="line">            suffix_object(child-&gt;prev, item);</span><br><span class="line">            <span class="built_in">array</span>-&gt;child-&gt;prev = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/add_item_to_array_first.png" alt="add_item_to_array_first"><br>** <code>child</code>非空<br>当<code>child</code>为非空时(非第一次调用), 如图<code>add_item_to_array_no_first</code>所示, 使用<code>array</code>的第一个<code>item</code>子节点的<code>prev</code>指针来定位最后一个<code>item</code>子节点(如红色指向所示), 形成双向链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">suffix_object</span><span class="params">(cJSON *prev, cJSON *item)</span></span>&#123;</span><br><span class="line">    prev-&gt;next = item;</span><br><span class="line">    item-&gt;prev = prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/add_item_to_array_no_first.png" alt="add_item_to_array_no_first"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自此已构建如下所示最简单的<code>JSON</code>数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Jack (\&quot;Bee\&quot;) Nimble&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> cJSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake-01</title>
      <link href="/2021/09/20/CMake-01/"/>
      <url>/2021/09/20/CMake-01/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的函数"><a href="#常用的函数" class="headerlink" title="常用的函数"></a>常用的函数</h1><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><p>参考<a href="https://www.jianshu.com/p/cdd6e56c2422">Cmake命令之project介绍</a></p><h1 id="option"><a href="#option" class="headerlink" title="option"></a>option</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">option</span>(&lt;option_variable&gt; <span class="string">&quot;help string describing option&quot;</span></span><br><span class="line">       [initial value])</span><br></pre></td></tr></table></figure><p><code>option</code>给用户提供<strong>打开</strong>或<strong>关闭</strong>的选项, 如果没有提供初始值, 则使用<code>OFF</code> </p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>CMakeLists.txt<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span>(SWITCH_SUPPORT_ESP8266 <span class="string">&quot;option for support ESP8266 &quot;</span> <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SWITCH_SUPPORT_ESP8266)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;SWITCH_SUPORT_ESP8266 is ON.&quot;</span>)</span><br><span class="line"><span class="keyword">add_definitions</span>(-DSUPPORT_ESP8266)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;SWITCH_SUPPORT_ESP8266 is OFF.&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> ./main.c)</span><br></pre></td></tr></table></figure></li></ol><p>2.<code>main.c</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SUPPORT_ESP8266</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s has defined macro SUPPORT_ESP8266.\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s has not defined macro SUPPORT_ESP8266.\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>3.编译与测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  draft_ws mkdir build</span><br><span class="line">➜  draft_ws <span class="built_in">cd</span> build                            </span><br><span class="line">➜  build cmake -DSWITCH_SUPPORT_ESP8266=ON ..</span><br><span class="line">...</span><br><span class="line">-- SWITCH_SUPORT_ESP8266 is ON.</span><br><span class="line">...</span><br><span class="line">➜  build make       </span><br><span class="line">Scanning dependencies of target <span class="built_in">test</span></span><br><span class="line">[ 50%] Building C object CMakeFiles/test.dir/main.c.o</span><br><span class="line">[100%] Linking C executable <span class="built_in">test</span></span><br><span class="line">[100%] Built target <span class="built_in">test</span></span><br><span class="line">➜  build ./<span class="built_in">test</span> </span><br><span class="line">./<span class="built_in">test</span> has defined macro SUPPORT_ESP8266.</span><br></pre></td></tr></table></figure></p><h1 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h1><ul><li><p>启动对C11标准的支持</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">11</span>)</span><br></pre></td></tr></table></figure></li><li><p>-Werror<br>遇到以下错误时, 取消编译选项<code>-Werror</code>; <code>-Werror</code>它要求<code>gcc</code>将所有的警告当成错误进行处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/home/tangshp/Code_ws/cJSON/test.c:111:13: error: ‘create_objects’ defined but not used [-Werror=unused-function]</span><br><span class="line">  111 | static void create_objects(void)</span><br><span class="line">      |             ^~~~~~~~~~~~~~</span><br><span class="line">cc1: all warnings being treated as errors</span><br><span class="line">make[2]: *** [CMakeFiles/cJSON_test.dir/build.make:63: CMakeFiles/cJSON_test.dir/test.c.o] Error 1</span><br><span class="line">make[1]: *** [CMakeFiles/Makefile2:229: CMakeFiles/cJSON_test.dir/all] Error 2</span><br><span class="line">make: *** [Makefile:141: all] Error 2</span><br></pre></td></tr></table></figure></li><li><p>-Wall<br>使用<code>-Wall</code>打开<code>gcc</code>的所有警告</p></li></ul><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html"><code>CMake</code>官网</a>给出有哪些特殊变量;</p><h2 id="CMAKE-lt-LANG-gt-COMPILER-ID"><a href="#CMAKE-lt-LANG-gt-COMPILER-ID" class="headerlink" title="CMAKE_&lt;LANG&gt;_COMPILER_ID"></a><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code></h2><ul><li><code>CMAKE_&lt;LANG&gt;_COMPILER_ID</code>是编译器标识字符串, 被用来标识编译器类型;以下可能的取值<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Absoft = Absoft Fortran (absoft.com)</span><br><span class="line">ADSP = Analog VisualDSP++ (analog.com)</span><br><span class="line">AppleClang = Apple Clang (apple.com)</span><br><span class="line">ARMCC = ARM Compiler (arm.com)</span><br><span class="line">ARMClang = ARM Compiler based <span class="keyword">on</span> Clang (arm.com)</span><br><span class="line">Bruce = Bruce C Compiler</span><br><span class="line">CCur = Concurrent Fortran (ccur.com)</span><br><span class="line">Clang = LLVM Clang (clang.llvm.org)</span><br><span class="line">Cray = Cray Compiler (cray.com)</span><br><span class="line">Embarcadero, Borland = Embarcadero (embarcadero.com)</span><br><span class="line">Flang = Flang LLVM Fortran Compiler</span><br><span class="line">Fujitsu = Fujitsu HPC compiler (Trad mode)</span><br><span class="line">FujitsuClang = Fujitsu HPC compiler (Clang mode)</span><br><span class="line">G95 = G95 Fortran (g95.org)</span><br><span class="line">GNU = GNU Compiler Collection (gcc.gnu.org)</span><br><span class="line">GHS = Green Hills Software (www.ghs.com)</span><br><span class="line">HP = Hewlett-Packard Compiler (hp.com)</span><br><span class="line">IAR = IAR Systems (iar.com)</span><br><span class="line">Intel = Intel Compiler (intel.com)</span><br><span class="line">IntelLLVM = Intel LLVM-Based Compiler (intel.com)</span><br><span class="line">MSVC = Microsoft Visual Studio (microsoft.com)</span><br><span class="line">NVHPC = NVIDIA HPC SDK Compiler (nvidia.com)</span><br><span class="line">NVIDIA = NVIDIA CUDA Compiler (nvidia.com)</span><br><span class="line">OpenWatcom = Open Watcom (openwatcom.org)</span><br><span class="line">PGI = The Portland Group (pgroup.com)</span><br><span class="line">PathScale = PathScale (pathscale.com)</span><br><span class="line">SDCC = Small Device C Compiler (sdcc.sourceforge.net)</span><br><span class="line">SunPro = Oracle Solaris Studio (oracle.com)</span><br><span class="line">TI = Texas Instruments (ti.com)</span><br><span class="line">TinyCC = Tiny C Compiler (tinycc.org)</span><br><span class="line">XL, VisualAge, zOS = IBM XL (ibm.com)</span><br><span class="line">XLClang = IBM Clang-based XL (ibm.com)</span><br></pre></td></tr></table></figure></li><li>示例<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="string">&quot;$&#123;CMAKE_C_COMPILER_ID&#125;&quot;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;Clang&quot;</span>) <span class="keyword">OR</span> (<span class="string">&quot;$&#123;CMAKE_C_COMPILER_ID&#125;&quot;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;GNU&quot;</span>))</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elseif</span>(<span class="string">&quot;$&#123;CMAKE_C_COMPILER_ID&#125;&quot;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;MSVC&quot;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> CMake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>googletest-04</title>
      <link href="/2021/09/14/googletest-04/"/>
      <url>/2021/09/14/googletest-04/</url>
      
        <content type="html"><![CDATA[<h1 id="框架说明"><a href="#框架说明" class="headerlink" title="框架说明"></a>框架说明</h1><ul><li>由于<code>TEST_F</code>的测试案例名必须是一个继承<code>testing::Test</code>的类的类名; 所以为了有效组织测试, 公共测试功能模块在类<code>A</code>中集中实现, 使用派生类<code>B</code>来测试测试用例</li></ul><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><blockquote><p>一个测试场景是需要考量每个测试用时是否都是小于5s, 大于5s被认为测试失败; 该功能在一系列测试案例中被使用; 所以定义一个类<code>QuickTest</code>来继承<code>testing::Test</code>; 之后在以<code>QuickTest</code>为父类, 派生出两个用于测试的类<code>IntegerFunctionTest</code>和<code>QueueTest</code></p></blockquote><p><img src="/images/deriving.png" alt="派生关系"></p><ul><li><code>IntegerFunctionTest</code>中没有实现<code>SetUp</code>和<code>TearDown</code></li><li><code>QueueTest</code>实现了<code>SetUp</code>, 必须显示调用<code>QuickTest::SetUp();</code>, 否则<code>start_time</code>得不到更新</li><li><code>EXPECT_TRUE(end_time - start_time_ &lt;= 5)</code>返回一个输出对象</li></ul><h1 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gtest/gtest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sample1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sample3-inl.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickTest</span> :</span> <span class="keyword">public</span> testing::Test &#123;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SetUp()===.\n&quot;</span>);</span><br><span class="line">    start_time_ = <span class="built_in">time</span>(<span class="literal">nullptr</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">TearDown</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Gets the time when the test finishes</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">time_t</span> end_time = <span class="built_in">time</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">EXPECT_TRUE</span>(end_time - start_time_ &lt;= <span class="number">5</span>) &lt;&lt; <span class="string">&quot;The test took too long.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The UTC time (in seconds) when the test starts</span></span><br><span class="line">  <span class="keyword">time_t</span> start_time_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerFunctionTest</span> :</span> <span class="keyword">public</span> QuickTest &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests Factorial()</span></span><br><span class="line"><span class="built_in">TEST_F</span>(IntegerFunctionTest, Factorial) &#123;</span><br><span class="line">  <span class="comment">// Tests factorial of negative numbers.</span></span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">-5</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">-1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_GT</span>(<span class="built_in">Factorial</span>(<span class="number">-10</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tests factorial of 0.</span></span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tests factorial of positive numbers.</span></span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">2</span>, <span class="built_in">Factorial</span>(<span class="number">2</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">6</span>, <span class="built_in">Factorial</span>(<span class="number">3</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">40320</span>, <span class="built_in">Factorial</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests IsPrime()</span></span><br><span class="line"><span class="built_in">TEST_F</span>(IntegerFunctionTest, IsPrime) &#123;</span><br><span class="line">  <span class="comment">// Tests negative input.</span></span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">-1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">-2</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(INT_MIN));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tests some trivial cases.</span></span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">0</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">2</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tests positive input.</span></span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">4</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">5</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">6</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">23</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueTest</span> :</span> <span class="keyword">public</span> QuickTest &#123;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 需要显示调用QuickTest::SetUp()</span></span><br><span class="line">    QuickTest::<span class="built_in">SetUp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Second, some additional setup for this fixture.</span></span><br><span class="line">    q1_.<span class="built_in">Enqueue</span>(<span class="number">1</span>);</span><br><span class="line">    q2_.<span class="built_in">Enqueue</span>(<span class="number">2</span>);</span><br><span class="line">    q2_.<span class="built_in">Enqueue</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// virtual void TearDown() &#123;</span></span><br><span class="line">  <span class="comment">//   QuickTest::TearDown();</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q0_;</span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q1_;</span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q2_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, let&#x27;s write tests using the QueueTest fixture.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests the default constructor.</span></span><br><span class="line"><span class="built_in">TEST_F</span>(QueueTest, DefaultConstructor) &#123; <span class="built_in">EXPECT_EQ</span>(<span class="number">0u</span>, q0_.<span class="built_in">Size</span>()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests Dequeue().</span></span><br><span class="line"><span class="built_in">TEST_F</span>(QueueTest, Dequeue) &#123;</span><br><span class="line">  <span class="keyword">int</span>* n = q0_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(n == <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">  n = q1_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(n != <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, *n);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">0u</span>, q1_.<span class="built_in">Size</span>());</span><br><span class="line">  <span class="keyword">delete</span> n;</span><br><span class="line"></span><br><span class="line">  n = q2_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(n != <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">2</span>, *n);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1u</span>, q2_.<span class="built_in">Size</span>());</span><br><span class="line">  <span class="keyword">delete</span> n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> googletest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, C++, 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>googletest-03</title>
      <link href="/2021/09/12/googletest-03/"/>
      <url>/2021/09/12/googletest-03/</url>
      
        <content type="html"><![CDATA[<h1 id="TEST-F-test-fixture"><a href="#TEST-F-test-fixture" class="headerlink" title="TEST_F(test fixture)"></a>TEST_F(<code>test fixture</code>)</h1><blockquote><p>1.<code>TEST_F</code>被使用在”很多测试使用共同的测试数据, 每次都需要相同初始化过程与清理过程”, 避免重复地初始化和清理过程<br>2.一个<code>TEST_F</code>不应该因为另一个测试<code>TEST_F</code>失败而失败<br>3.每个<code>TEST_F</code>都有新的数据复本, 不能期望将一个测试<code>TEST_F</code>修改的数据传递给另一个测试<code>TEST_F</code></p></blockquote><h2 id="TEST-F的使用"><a href="#TEST-F的使用" class="headerlink" title="TEST_F的使用"></a><code>TEST_F</code>的使用</h2><h3 id="继承类的定义"><a href="#继承类的定义" class="headerlink" title="继承类的定义"></a>继承类的定义</h3><blockquote><p>要使用<code>test fixture</code>需要定义一个派生<code>testing::Test</code>的<code>C++</code>类<code>XXXTest</code>, 具体参考类<code>QueueTestSmpl3</code>的定义</p><ul><li>在类<code>XXXTest</code>的定义中使用关键字<code>protected</code>, 使得能够被子类访问</li><li>每一个<code>TEST_F</code>被运行之<strong>前</strong>都会调用<code>virtual void SetUp()</code>, 可以在函数<code>virtual void SetUp()</code>中定义所有变量的初始化工作;如果不定义则会被跳过</li><li>每一个<code>TEST_F</code>被运行之<strong>后</strong>都会调用<code>virtual void TearDown()</code>, 所以可以在<code>virtual void TearDown()</code>中定义清理工作; 如果不定义则可以省略</li><li>还可以在类中定义其它的辅助测试的函数</li><li>在类<code>XXXTest</code>中声明哪些测试中需要用到的变量(Declares the variables your tests want to use.)</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueTestSmpl3</span> :</span> <span class="keyword">public</span> testing::Test &#123;</span><br><span class="line"> <span class="keyword">protected</span>:  <span class="comment">// You should make the members protected s.t. they can be</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    q1_.<span class="built_in">Enqueue</span>(<span class="number">1</span>);</span><br><span class="line">    q2_.<span class="built_in">Enqueue</span>(<span class="number">2</span>);</span><br><span class="line">    q2_.<span class="built_in">Enqueue</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;index :: %s::%d[local_index]\n&quot;</span>, __func__, local_index++);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">TearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;TearDown~\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A helper function that some test uses.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Double</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span> * n; &#125;</span><br><span class="line">  <span class="comment">// A helper function for testing Queue::Map().</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">MapTester</span><span class="params">(<span class="keyword">const</span> Queue&lt;<span class="keyword">int</span>&gt;* q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Creates a new queue, where each element is twice as big as the</span></span><br><span class="line">    <span class="comment">// corresponding one in q.</span></span><br><span class="line">    <span class="keyword">const</span> Queue&lt;<span class="keyword">int</span>&gt;* <span class="keyword">const</span> new_q = q-&gt;<span class="built_in">Map</span>(Double);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verifies that the new queue has the same size as q.</span></span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(q-&gt;<span class="built_in">Size</span>(), new_q-&gt;<span class="built_in">Size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verifies the relationship between the elements of the two queues.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> QueueNode&lt;<span class="keyword">int</span>&gt;*n1 = q-&gt;<span class="built_in">Head</span>(), *n2 = new_q-&gt;<span class="built_in">Head</span>();</span><br><span class="line">         n1 != <span class="literal">nullptr</span>; n1 = n1-&gt;<span class="built_in">next</span>(), n2 = n2-&gt;<span class="built_in">next</span>()) &#123;</span><br><span class="line">      <span class="built_in">EXPECT_EQ</span>(<span class="number">2</span> * n1-&gt;<span class="built_in">element</span>(), n2-&gt;<span class="built_in">element</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> new_q;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q0_;</span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q1_;</span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q2_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="TEST-F测试函数的编写"><a href="#TEST-F测试函数的编写" class="headerlink" title="TEST_F测试函数的编写"></a><code>TEST_F</code>测试函数的编写</h3><blockquote><p><strong>测试案例名必须是之前定义的派生类名</strong>, 使得测试函数中能够使用之前定义的成员函数; 但测试名可以自定义</p><ul><li>可以把测试案例<code>TEST_F</code>当作类<code>QueueTestSmpl3</code>的成员方法一样使用其<strong>成员变量</strong>和<strong>成员方法</strong></li><li><code>EXPECT_TRUE(condition)</code></li><li><code>EXPECT_FALSE(condition)</code></li><li><code>ASSERT_TRUE(condition)</code></li><li><code>ASSERT_FALSE(condition)</code></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gtest/gtest.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sample3-inl.h&quot;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> local_index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="comment">// To use a test fixture, derive a class from testing::Test.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueTestSmpl3</span> :</span> <span class="keyword">public</span> testing::Test &#123;</span><br><span class="line"> <span class="keyword">protected</span>:  <span class="comment">// You should make the members protected s.t. they can be</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetUp</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    q1_.<span class="built_in">Enqueue</span>(<span class="number">1</span>);</span><br><span class="line">    q2_.<span class="built_in">Enqueue</span>(<span class="number">2</span>);</span><br><span class="line">    q2_.<span class="built_in">Enqueue</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;index :: %s::%d[local_index]\n&quot;</span>, __func__, local_index++);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">TearDown</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;TearDown~\n&quot;</span>); &#125;</span><br><span class="line">  <span class="comment">// A helper function that some test uses.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Double</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span> * n; &#125;</span><br><span class="line">  <span class="comment">// A helper function for testing Queue::Map().</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">MapTester</span><span class="params">(<span class="keyword">const</span> Queue&lt;<span class="keyword">int</span>&gt;* q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Creates a new queue, where each element is twice as big as the</span></span><br><span class="line">    <span class="comment">// corresponding one in q.</span></span><br><span class="line">    <span class="keyword">const</span> Queue&lt;<span class="keyword">int</span>&gt;* <span class="keyword">const</span> new_q = q-&gt;<span class="built_in">Map</span>(Double);</span><br><span class="line">    <span class="comment">// Verifies that the new queue has the same size as q.</span></span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(q-&gt;<span class="built_in">Size</span>(), new_q-&gt;<span class="built_in">Size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verifies the relationship between the elements of the two queues.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> QueueNode&lt;<span class="keyword">int</span>&gt;*n1 = q-&gt;<span class="built_in">Head</span>(), *n2 = new_q-&gt;<span class="built_in">Head</span>();</span><br><span class="line">         n1 != <span class="literal">nullptr</span>; n1 = n1-&gt;<span class="built_in">next</span>(), n2 = n2-&gt;<span class="built_in">next</span>()) &#123;</span><br><span class="line">      <span class="built_in">EXPECT_EQ</span>(<span class="number">2</span> * n1-&gt;<span class="built_in">element</span>(), n2-&gt;<span class="built_in">element</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> new_q;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Declares the variables your tests want to use.</span></span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q0_;</span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q1_;</span><br><span class="line">  Queue&lt;<span class="keyword">int</span>&gt; q2_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Tests the default c&#x27;tor.</span></span><br><span class="line"><span class="built_in">TEST_F</span>(QueueTestSmpl3, DefaultConstructor) &#123;</span><br><span class="line">  <span class="comment">// You can access data in the test fixture here.</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;start[Change] ...\n&quot;</span>);</span><br><span class="line">  <span class="built_in">EXPECT_NE</span>(<span class="number">0u</span>, q0_.<span class="built_in">Size</span>());</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;finish.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests Dequeue().</span></span><br><span class="line"><span class="built_in">TEST_F</span>(QueueTestSmpl3, Dequeue) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;start[Change] ...\n&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span>* n = q0_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(n == <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">  n = q1_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">ASSERT_FALSE</span>(n != <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Remaining 4 compare.&quot;</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, *n);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">0u</span>, q1_.<span class="built_in">Size</span>());</span><br><span class="line">  <span class="keyword">delete</span> n;</span><br><span class="line"></span><br><span class="line">  n = q2_.<span class="built_in">Dequeue</span>();</span><br><span class="line">  <span class="built_in">ASSERT_TRUE</span>(n != <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">2</span>, *n);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1u</span>, q2_.<span class="built_in">Size</span>());</span><br><span class="line">  <span class="keyword">delete</span> n;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;finish.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests the Queue::Map() function.</span></span><br><span class="line"><span class="built_in">TEST_F</span>(QueueTestSmpl3, Map) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;start ...\n&quot;</span>);</span><br><span class="line">  <span class="built_in">MapTester</span>(&amp;q0_);</span><br><span class="line">  <span class="built_in">MapTester</span>(&amp;q1_);</span><br><span class="line">  <span class="built_in">MapTester</span>(&amp;q2_);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;finish.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXPECT与ASSERT的对比"><a href="#EXPECT与ASSERT的对比" class="headerlink" title="EXPECT与ASSERT的对比"></a>EXPECT与ASSERT的对比</h3><ul><li><code>EXPECT_XXX</code>测试失败后会继续执行前测试案例中的剩余测试语句; 而<code>ASSERT_XXX</code>测试失败后不会继续测试剩余的语句, 直接执行当前测试案例对应的<code>TearDown()</code>函数; 查看代码与测试结果可得该结论<br><img src="/images/EXPECT_ASSERT.png" alt="EXPECT_XXX与ASSERT_XXX的对比"></li></ul><h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS += -I ./samples </span><br><span class="line">CFLAGS += -I ./<span class="keyword">include</span></span><br><span class="line">LFLAGS +=  ../build/lib/libgtest.a  -lpthread </span><br><span class="line">BINPATH = <span class="string">&quot;./testBin/&quot;</span></span><br><span class="line">OBJS = $&#123;BINPATH&#125; $&#123;BINPATH&#125;sample3_unittest</span><br><span class="line"></span><br><span class="line">ALL : $&#123;OBJS&#125;</span><br><span class="line">echo <span class="string">&quot;generate &quot;</span>$&#123;BINPATH&#125;<span class="variable">$^</span></span><br><span class="line"></span><br><span class="line">$&#123;BINPATH&#125; :</span><br><span class="line">-mkdir <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">$&#123;BINPATH&#125;sample3_unittest : ./samples/sample3_unittest.cc ./src/gtest_main.cc</span><br><span class="line">g++ $&#123;CFLAGS&#125;  <span class="variable">$^</span> $&#123;LFLAGS&#125;  -o <span class="variable">$@</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.PHONY : clean ALL</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">@rm -r $&#123;BINPATH&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> googletest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, C++, 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode的基本使用</title>
      <link href="/2021/09/12/vscode%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/09/12/vscode%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><div class="table-container"><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">光标回退</td><td style="text-align:center"><kbd>Alt</kbd> + <kbd>left</kbd></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">光标前进</td><td style="text-align:center"><kbd>Alt</kbd> + <kbd>right</kbd></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">头文件/源文件跳转</td><td style="text-align:center"><kbd>Alt</kbd> + <kbd>o</kbd></td><td style="text-align:center"></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Linux的基本使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux, 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>googletest-02</title>
      <link href="/2021/09/12/googletest-02/"/>
      <url>/2021/09/12/googletest-02/</url>
      
        <content type="html"><![CDATA[<h1 id="使用TEST测试C-类的成员函数"><a href="#使用TEST测试C-类的成员函数" class="headerlink" title="使用TEST测试C++类的成员函数"></a>使用TEST测试C++类的成员函数</h1><blockquote><p>字符串是否相等(其中<code>STRCASE</code>表明不区分大小写)</p></blockquote><ul><li><code>EXPECT_STREQ(s1, s2)</code></li><li><code>EXPECT_STRNE(s1, s2)</code></li><li><code>EXPECT_STRCASEEQ(s1, s2)</code> </li><li><code>EXPECT_STRCASENE(s1, s2)</code> </li></ul><h1 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h1><ul><li><p>头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> GOOGLETEST_SAMPLES_SAMPLE2_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GOOGLETEST_SAMPLES_SAMPLE2_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// A simple string class.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* c_string_;</span><br><span class="line">  <span class="keyword">const</span> MyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString&amp; rhs);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Clones a 0-terminated C string, allocating memory using new.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">CloneCString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* a_c_string)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// C&#x27;tors</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The default c&#x27;tor constructs a NULL string.</span></span><br><span class="line">  <span class="built_in">MyString</span>() : <span class="built_in">c_string_</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constructs a MyString by cloning a 0-terminated C string.</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">MyString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* a_c_string)</span> : c_string_(nullptr) &#123;</span></span><br><span class="line">    <span class="built_in">Set</span>(a_c_string);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy c&#x27;tor</span></span><br><span class="line">  <span class="built_in">MyString</span>(<span class="keyword">const</span> MyString&amp; string) : <span class="built_in">c_string_</span>(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">Set</span>(string.c_string_);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// D&#x27;tor.  MyString is intended to be a final class, so the d&#x27;tor</span></span><br><span class="line">  <span class="comment">// doesn&#x27;t need to be virtual.</span></span><br><span class="line">  ~<span class="built_in">MyString</span>() &#123; <span class="keyword">delete</span>[] c_string_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Gets the 0-terminated C string this MyString object represents.</span></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">c_string</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c_string_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">Length</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> c_string_ == <span class="literal">nullptr</span> ? <span class="number">0</span> : <span class="built_in">strlen</span>(c_string_); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sets the 0-terminated C string this MyString object represents.</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* c_string)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure></li><li><p>源文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sample2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// Clones a 0-terminated C string, allocating memory using new.</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">MyString::CloneCString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* a_c_string)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a_c_string == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(a_c_string);</span><br><span class="line">  <span class="keyword">char</span>* <span class="keyword">const</span> clone = <span class="keyword">new</span> <span class="keyword">char</span>[ len + <span class="number">1</span> ];</span><br><span class="line">  <span class="built_in">memcpy</span>(clone, a_c_string, len + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sets the 0-terminated C string this MyString object</span></span><br><span class="line"><span class="comment">// represents.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyString::Set</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* a_c_string)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Makes sure this works when c_string == c_string_</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> temp = MyString::<span class="built_in">CloneCString</span>(a_c_string);</span><br><span class="line">  <span class="keyword">delete</span>[] c_string_;</span><br><span class="line">  c_string_ = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试函数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sample2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gtest/gtest.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="comment">// In this example, we test the MyString class (a simple string).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests the default c&#x27;tor.</span></span><br><span class="line"><span class="built_in">TEST</span>(MyString, DefaultConstructor) &#123;</span><br><span class="line">  <span class="keyword">const</span> MyString s;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Asserts that s.c_string() returns NULL.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// &lt;TechnicalDetails&gt;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// If we write NULL instead of</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   static_cast&lt;const char *&gt;(NULL)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// in this assertion, it will generate a warning on gcc 3.4.  The</span></span><br><span class="line">  <span class="comment">// reason is that EXPECT_EQ needs to know the types of its</span></span><br><span class="line">  <span class="comment">// arguments in order to print them when it fails.  Since NULL is</span></span><br><span class="line">  <span class="comment">// #defined as 0, the compiler will use the formatter function for</span></span><br><span class="line">  <span class="comment">// int to print it.  However, gcc thinks that NULL should be used as</span></span><br><span class="line">  <span class="comment">// a pointer, not an int, and therefore complains.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The root of the problem is C++&#x27;s lack of distinction between the</span></span><br><span class="line">  <span class="comment">// integer number 0 and the null pointer constant.  Unfortunately,</span></span><br><span class="line">  <span class="comment">// we have to live with this fact.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// &lt;/TechnicalDetails&gt;</span></span><br><span class="line">  <span class="built_in">EXPECT_STREQ</span>(<span class="literal">nullptr</span>, s.<span class="built_in">c_string</span>());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">0u</span>, s.<span class="built_in">Length</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> kHelloString[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests the c&#x27;tor that accepts a C string.</span></span><br><span class="line"><span class="built_in">TEST</span>(MyString, ConstructorFromCString) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> MyString <span class="title">s</span><span class="params">(kHelloString)</span></span>;</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">0</span>, <span class="built_in">strcmp</span>(s.<span class="built_in">c_string</span>(), kHelloString));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(kHelloString)/<span class="built_in"><span class="keyword">sizeof</span></span>(kHelloString[<span class="number">0</span>]) - <span class="number">1</span>,</span><br><span class="line">            s.<span class="built_in">Length</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests the copy c&#x27;tor.</span></span><br><span class="line"><span class="built_in">TEST</span>(MyString, CopyConstructor) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> MyString <span class="title">s1</span><span class="params">(kHelloString)</span></span>;</span><br><span class="line">  <span class="keyword">const</span> MyString s2 = s1;</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">0</span>, <span class="built_in">strcmp</span>(s2.<span class="built_in">c_string</span>(), kHelloString));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests the Set method.</span></span><br><span class="line"><span class="built_in">TEST</span>(MyString, Set) &#123;</span><br><span class="line">  MyString s;</span><br><span class="line"></span><br><span class="line">  s.<span class="built_in">Set</span>(kHelloString);</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">0</span>, <span class="built_in">strcmp</span>(s.<span class="built_in">c_string</span>(), kHelloString));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set should work when the input pointer is the same as the one</span></span><br><span class="line">  <span class="comment">// already in the MyString object.</span></span><br><span class="line">  s.<span class="built_in">Set</span>(s.<span class="built_in">c_string</span>());</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">0</span>, <span class="built_in">strcmp</span>(s.<span class="built_in">c_string</span>(), kHelloString));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Can we set the MyString to NULL?</span></span><br><span class="line">  s.<span class="built_in">Set</span>(<span class="literal">nullptr</span>);</span><br><span class="line">  <span class="built_in">EXPECT_STREQ</span>(<span class="literal">nullptr</span>, s.<span class="built_in">c_string</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS += -I ./samples </span><br><span class="line">CFLAGS += -I ./<span class="keyword">include</span></span><br><span class="line">LFLAGS +=  ../build/lib/libgtest.a  -lpthread </span><br><span class="line">BINPATH = <span class="string">&quot;./testBin/&quot;</span></span><br><span class="line">OBJS = $&#123;BINPATH&#125; $&#123;BINPATH&#125;sample3_unittest</span><br><span class="line"></span><br><span class="line">ALL : $&#123;OBJS&#125;</span><br><span class="line">echo <span class="string">&quot;generate &quot;</span>$&#123;BINPATH&#125;<span class="variable">$^</span></span><br><span class="line"></span><br><span class="line">$&#123;BINPATH&#125; :</span><br><span class="line">-mkdir <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">$&#123;BINPATH&#125;sample2_unittest : ./samples/sample2_unittest.cc ./samples/sample2.cc ./src/gtest_main.cc</span><br><span class="line">g++ $&#123;CFLAGS&#125;  <span class="variable">$^</span> $&#123;LFLAGS&#125;  -o <span class="variable">$@</span> </span><br><span class="line"></span><br><span class="line">.PHONY : clean ALL</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">@rm -r $&#123;BINPATH&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> googletest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, C++, 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-blog-template</title>
      <link href="/2021/09/11/hexo-blog-template/"/>
      <url>/2021/09/11/hexo-blog-template/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> hexo本身 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, C++, 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>googletest-01</title>
      <link href="/2021/09/11/googletest-01/"/>
      <url>/2021/09/11/googletest-01/</url>
      
        <content type="html"><![CDATA[<h1 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h1><h2 id="TEST使用说明"><a href="#TEST使用说明" class="headerlink" title="TEST使用说明"></a>TEST使用说明</h2><blockquote><p>简单的测试需要一下三步<br>1.包行必备的头文件, 使用<code>gtest/gtest.h</code>来声明测试框架<br>2.使用宏<code>TEST</code>来定义测试, <code>TEST</code>包含测试案例名(<code>test case name</code>, 即后面的<code>FactorialTest</code>)和测试名(<code>test name</code>)两个参数, 这两个参数的命名可随意, 不同于后面的<code>TEST_F</code>; 在所有的一对花括号<code>&#123;&#125;</code>中定义测试逻辑, 可以在头文件中<code>gtest.h</code> 查看所有可使用的宏, 如下所示:</p><ul><li><code>EXPECT_EQ(val1, val2)</code></li><li><code>EXPECT_NE(val1, val2)</code></li><li><code>EXPECT_LE(val1, val2)</code></li><li><code>EXPECT_LT(val1, val2)</code></li><li><code>EXPECT_GE(val1, val2)</code></li><li><code>EXPECT_GT(val1, val2)</code><br>3.使用定义在<code>main()</code>的宏函数<code>RUN_ALL_TESTS()</code> ,主函数如下所示;</li></ul></blockquote><p>主函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gtest/gtest.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> GTEST_OS_ESP8266 || GTEST_OS_ESP32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> GTEST_OS_ESP8266</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  testing::InitGoogleTest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123; RUN_ALL_TESTS(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> GTEST_OS_ESP8266</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">GTEST_API_ <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Running main() from %s\n&quot;</span>, __FILE__);</span><br><span class="line">  testing::InitGoogleTest(&amp;argc, argv);</span><br><span class="line">  <span class="keyword">return</span> RUN_ALL_TESTS();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><ul><li>头文件<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> GOOGLETEST_SAMPLES_SAMPLE1_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GOOGLETEST_SAMPLES_SAMPLE1_H_</span></span><br><span class="line"><span class="comment">// Returns n! (the factorial of n).  For negative n, n! is defined to be 1.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">// Returns true if and only if n is a prime number.</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure></li><li>源文件<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sample1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns n! (the factorial of n).  For negative n, n! is defined to be 1.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    result *= i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns true if and only if n is a prime number.</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Trivial case 1: small numbers</span></span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trivial case 2: even numbers</span></span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n == <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now, we have that n is odd and n &gt;= 3.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Try to divide n by every odd number i, starting from 3</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; ; i += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// We only have to try i up to the square root of n</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; n/i) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now, we have i &lt;= n/i &lt; n.</span></span><br><span class="line">    <span class="comment">// If n is divisible by i, n is not prime.</span></span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// n has no integer factor in the range (1, n), and thus is prime.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>以下是测试文件, 包含两个测试案例<code>FactorialTest</code>和<code>IsPrimeTest</code>; 测试案例<code>FactorialTest</code>包含<code>Negative</code>、<code>Zero</code>和<code>Positive</code>三个测试;测试案例<code>IsPrimeTest</code>包含<code>Negative</code>、<code>Trivial</code>和<code>Positive</code>三个测试</p><ul><li>测试文件<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sample1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;gtest/gtest.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests Factorial().</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests factorial of negative numbers.</span></span><br><span class="line"><span class="built_in">TEST</span>(FactorialTest, Negative) &#123;</span><br><span class="line">  <span class="comment">// This test is named &quot;Negative&quot;, and belongs to the &quot;FactorialTest&quot;</span></span><br><span class="line">  <span class="comment">// test case.</span></span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">-5</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">-1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_GT</span>(<span class="built_in">Factorial</span>(<span class="number">-10</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests factorial of 0.</span></span><br><span class="line"><span class="built_in">TEST</span>(FactorialTest, Zero) &#123; <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">0</span>)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests factorial of positive numbers.</span></span><br><span class="line"><span class="built_in">TEST</span>(FactorialTest, Positive) &#123;</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">1</span>, <span class="built_in">Factorial</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">2</span>, <span class="built_in">Factorial</span>(<span class="number">2</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">6</span>, <span class="built_in">Factorial</span>(<span class="number">3</span>));</span><br><span class="line">  <span class="built_in">EXPECT_EQ</span>(<span class="number">40320</span>, <span class="built_in">Factorial</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests IsPrime()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests negative input.</span></span><br><span class="line"><span class="built_in">TEST</span>(IsPrimeTest, Negative) &#123;</span><br><span class="line">  <span class="comment">// This test belongs to the IsPrimeTest test case.</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">-1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">-2</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(INT_MIN));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests some trivial cases.</span></span><br><span class="line"><span class="built_in">TEST</span>(IsPrimeTest, Trivial) &#123;</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">0</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">2</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests positive input.</span></span><br><span class="line"><span class="built_in">TEST</span>(IsPrimeTest, Positive) &#123;</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">4</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">5</span>));</span><br><span class="line">  <span class="built_in">EXPECT_FALSE</span>(<span class="built_in">IsPrime</span>(<span class="number">6</span>));</span><br><span class="line">  <span class="built_in">EXPECT_TRUE</span>(<span class="built_in">IsPrime</span>(<span class="number">23</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace</span></span><br></pre></td></tr></table></figure><h2 id="Makefile说明"><a href="#Makefile说明" class="headerlink" title="Makefile说明"></a><code>Makefile</code>说明</h2>注意<code>pthread</code>必须放在<code>libgtest.a</code>后<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS += -I ./samples </span><br><span class="line">CFLAGS += -I ./<span class="keyword">include</span></span><br><span class="line">LFLAGS +=  ../build/lib/libgtest.a  -lpthread </span><br><span class="line"></span><br><span class="line">sample1_unittest : ./samples/sample1_unittest.cc ./samples/sample1.cc ./src/gtest_main.cc</span><br><span class="line">  g++ $&#123;CFLAGS&#125;  <span class="variable">$^</span> $&#123;LFLAGS&#125;  -o <span class="variable">$@</span> </span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">  @rm -v sample1_unittest</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><blockquote><p>故意修改最后一个测试, 测试结果如下</p></blockquote><p><img src="/images/TEST_RES.png" alt="TEST执行结果"></p>]]></content>
      
      
      <categories>
          
          <category> googletest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, C++, 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo, Hello World</title>
      <link href="/2021/09/08/hexo-hello-world/"/>
      <url>/2021/09/08/hexo-hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h1><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">出师表</button></li><li class="tab"><button type="button" data-href="#test2-2">图库</button></li><li class="tab active"><button type="button" data-href="#test2-3">李白</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p>臣亮言：先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍衞之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中府中，俱为一体；陟罚臧否，不宜异同：若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理；不宜偏私，使内外异法也。<br>侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下：愚以为宫中之事，事无大小，悉以谘之，然后施行，必能裨补阙漏，有所广益。<br>将军向宠，性行淑均，晓畅军事，试用于昔日，先帝称之曰“能”，是以众议举宠为督：愚以为营中之事，悉以谘之，必能使行阵和睦，优劣得所。<br>亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未嘗不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之、信之，则汉室之隆，可计日而待也。<br>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，谘臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间：尔来二十有一年矣。<br>先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐託付不效，以伤先帝之明；故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸兇，兴復汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。<br>愿陛下託臣以讨贼兴復之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以谘诹善道，察纳雅言，深追先帝遗诏。臣不胜受恩感激。<br>今当远离，临表涕零，不知所言。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><h1 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,,outline%&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify button--animated " href="https://butterfly.js.org" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://butterfly.js.org" title="Butterfly"><span>Butterfly</span></a></p><h1 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">This is my website, click the button  &#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,block right blue larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button  <a class="btn-beautify button--animated block larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button  <a class="btn-beautify button--animated block center larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button  <a class="btn-beautify button--animated block right blue larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><blockquote><p>more than one button in center<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><div class="btn-center"><a class="btn-beautify button--animated larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated pink larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated red larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated purple larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated green larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline pink larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline red larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline purple larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline orange larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify button--animated outline green larger" href="https://butterfly.js.org" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><h1 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>simple<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><br><div class="note simple"><p>默认 提示块标籤</p></div></p></blockquote><div class="note default simple"><p>default 提示块标籤</p></div><div class="note primary simple"><p>primary 提示块标籤</p></div><div class="note success simple"><p>success 提示块标籤</p></div><div class="note info simple"><p>info 提示块标籤</p></div><div class="note warning simple"><p>warning 提示块标籤</p></div><div class="note danger simple"><p>danger 提示块标籤</p></div><blockquote><p>modern<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><br><div class="note modern"><p>默认 提示块标籤</p></div></p></blockquote><div class="note default modern"><p>default 提示块标籤</p></div><div class="note primary modern"><p>primary 提示块标籤</p></div><div class="note success modern"><p>success 提示块标籤</p></div><div class="note info modern"><p>info 提示块标籤</p></div><div class="note warning modern"><p>warning 提示块标籤</p></div><div class="note danger modern"><p>danger 提示块标籤</p></div>]]></content>
      
      
      <categories>
          
          <category> hexo本身 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用工具安装</title>
      <link href="/2021/09/02/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
      <url>/2021/09/02/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g tldr</span><br></pre></td></tr></table></figure><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载nodejs</span></span><br><span class="line">➜ Tools wget https://nodejs.org/dist/latest-v12.x/node-v12.22.6-linux-arm64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">➜ Tools tar zxvf ./node-v12.22.6-linux-arm64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">➜ Tools mv node-v12.22.6-linux-arm64 node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到/usr/local</span></span><br><span class="line">➜ Tools sudo mv ./node /usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line">➜ Tools cat ~/.zshrc | tail -n 1</span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/node/bin</span><br><span class="line"><span class="comment"># 查看node版本</span></span><br><span class="line"></span><br><span class="line">➜ Tools node -v</span><br><span class="line">v12.22.6</span><br></pre></td></tr></table></figure><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><h2 id="必须先安装node-js"><a href="#必须先安装node-js" class="headerlink" title="必须先安装node-js"></a>必须先安装<code>node-js</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装cnpm, 使用淘宝的源可快速下载hexo</span></span><br><span class="line">➜ Tools npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">npm WARN deprecated har-validator@5.1.5: this library is no longer supported</span><br><span class="line">/usr/<span class="built_in">local</span>/node/bin/cnpm -&gt; /usr/<span class="built_in">local</span>/node/lib/node_modules/cnpm/bin/cnpm</span><br><span class="line">+ cnpm@7.0.0</span><br><span class="line">added 709 packages from 970 contributors <span class="keyword">in</span> 74.274s</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜ Tools cnpm install -g hexo-cli</span><br><span class="line">Downloading hexo-cli to /usr/<span class="built_in">local</span>/node/lib/node_modules/hexo-cli_tmp</span><br><span class="line">Copying /usr/<span class="built_in">local</span>/node/lib/node_modules/hexo-cli_tmp/_hexo-cli@4.3.0@hexo-cli to /usr/<span class="built_in">local</span>/node/lib/node_modules/hexo-cli</span><br><span class="line">Installing hexo-cli<span class="string">&#x27;s dependencies to /usr/local/node/lib/node_modules/hexo-cli/node_modules</span></span><br><span class="line"><span class="string">[1/10] abbrev@^1.1.1 installed at node_modules/_abbrev@1.1.1@abbrev</span></span><br><span class="line"><span class="string">[2/10] tildify@^2.0.0 installed at node_modules/_tildify@2.0.0@tildify</span></span><br><span class="line"><span class="string">[3/10] hexo-log@^2.0.0 installed at node_modules/_hexo-log@2.0.0@hexo-log</span></span><br><span class="line"><span class="string">[4/10] minimist@^1.2.5 installed at node_modules/_minimist@1.2.5@minimist</span></span><br><span class="line"><span class="string">[5/10] command-exists@^1.2.8 installed at node_modules/_command-exists@1.2.9@command-exists</span></span><br><span class="line"><span class="string">[6/10] bluebird@^3.5.5 installed at node_modules/_bluebird@3.7.2@bluebird</span></span><br><span class="line"><span class="string">platform unsupported hexo-fs@3.1.0 › chokidar@3.5.2 › fsevents@~2.3.2 Package require os(darwin) not compatible with your platform(linux)</span></span><br><span class="line"><span class="string">[fsevents@~2.3.2] optional install error: Package require os(darwin) not compatible with your platform(linux)</span></span><br><span class="line"><span class="string">[7/10] chalk@^4.0.0 installed at node_modules/_chalk@4.1.2@chalk</span></span><br><span class="line"><span class="string">[8/10] hexo-fs@^3.0.1 installed at node_modules/_hexo-fs@3.1.0@hexo-fs</span></span><br><span class="line"><span class="string">[9/10] resolve@^1.11.0 installed at node_modules/_resolve@1.20.0@resolve</span></span><br><span class="line"><span class="string">[10/10] hexo-util@^2.0.0 installed at node_modules/_hexo-util@2.5.0@hexo-util</span></span><br><span class="line"><span class="string">Recently updated (since 2021-08-26): 2 packages (detail see file /usr/local/node/lib/node_modules/hexo-cli/node_modules/.recently_updates.txt)</span></span><br><span class="line"><span class="string">  2021-08-29</span></span><br><span class="line"><span class="string">    → hexo-util@2.5.0 › htmlparser2@6.1.0 › domhandler@^4.0.0(4.2.2) (22:18:56)</span></span><br><span class="line"><span class="string">  2021-08-28</span></span><br><span class="line"><span class="string">    → hexo-util@2.5.0 › htmlparser2@6.1.0 › domutils@^2.5.2(2.8.0) (07:21:51)</span></span><br><span class="line"><span class="string">All packages installed (57 packages installed from npm registry, used 3s(network 3s), speed 481.11KB/s, json 57(137.48KB), tarball 1.42MB)</span></span><br><span class="line"><span class="string">[hexo-cli@4.3.0] link /usr/local/node/bin/hexo@ -&gt; /usr/local/node/lib/node_modules/hexo-cli/bin/hexo</span></span><br></pre></td></tr></table></figure><h2 id="hexo-cnpm-npm都被安装在node文件夹下"><a href="#hexo-cnpm-npm都被安装在node文件夹下" class="headerlink" title="hexo, cnpm, npm都被安装在node文件夹下"></a>hexo, cnpm, npm都被安装在node文件夹下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜ bin <span class="built_in">pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/node/bin</span><br><span class="line">➜ bin ll</span><br><span class="line">总用量 46M</span><br><span class="line">lrwxrwxrwx 1 pi pi  33 9月   2 22:27 cnpm -&gt; ../lib/node_modules/cnpm/bin/cnpm</span><br><span class="line">lrwxrwxrwx 1 pi pi  37 9月   2 22:29 hexo -&gt; ../lib/node_modules/hexo-cli/bin/hexo</span><br><span class="line">-rwxr-xr-x 1 pi p 46M 8月  31 01:39 node</span><br><span class="line">lrwxrwxrwx 1 pi pi  38 8月  31 01:39 npm -&gt; ../lib/node_modules/npm/bin/npm-cli.js</span><br><span class="line">lrwxrwxrwx 1 pi pi  38 8月  31 01:39 npx -&gt; ../lib/node_modules/npm/bin/npx-cli.js</span><br></pre></td></tr></table></figure><h1 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h1><ul><li>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单;如何使用参考<a href="/2021/08/15/Linux-命令/index.html">Linux-命令</a>;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure></li><li>安装完成后,会自动创建下面目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜ .pm2 <span class="built_in">pwd</span></span><br><span class="line">/home/pi/.pm2</span><br><span class="line">➜ .pm2 ls</span><br><span class="line">dump.pm2  logs  module_conf.json  modules  pids  pm2.log  pm2.pid  pub.sock  rpc.sock  touch</span><br></pre></td></tr></table></figure></li></ul><p>[1]-<a href="https://www.cnblogs.com/EasonJim/p/7863099.html">zsh的安装</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux的基本使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-内核学习-03</title>
      <link href="/2021/08/29/Linux-%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0-03/"/>
      <url>/2021/08/29/Linux-%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0-03/</url>
      
        <content type="html"><![CDATA[<h1 id="一个调用驱动里的write函数的示例"><a href="#一个调用驱动里的write函数的示例" class="headerlink" title="一个调用驱动里的write函数的示例"></a>一个调用驱动里的write函数的示例</h1><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><p>要调用驱动里的<code>write</code>函数, 需要使用<code>mknod</code>命令建立驱动文件, 在<strong>应用层</strong>像打开文件一样打开该驱动文件, 使用读<code>read</code>函数和写<code>write</code>函数实现对驱动里的<code>write</code>函数进行调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">➜  test_hello_demo cat test_hello_demo.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span> <span class="comment">// 为了能够使用O_RDWR</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span> <span class="comment">// 为了使用 write 和 read</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_NUM (64)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fd, i;</span><br><span class="line">        <span class="keyword">int</span> r_len, w_len;</span><br><span class="line">        <span class="keyword">char</span> buf[DATA_NUM] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, DATA_NUM);</span><br><span class="line">        fd = open(<span class="string">&quot;/dev/hello&quot;</span>, O_RDWR);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fd : %d\r\n&quot;</span>, fd);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == fd)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;open file error\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;open success.\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        w_len = write(fd, buf, DATA_NUM);</span><br><span class="line">        r_len = read(fd, buf, DATA_NUM);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\r\n&quot;</span>, w_len, r_len);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>使用最简单的<code>Makefile</code>进行编译即可<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_hello_demo : test_hello_demo.c</span><br><span class="line">        gcc <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        rm -v test_hello_demo</span><br></pre></td></tr></table></figure></p><h2 id="执行demo"><a href="#执行demo" class="headerlink" title="执行demo"></a>执行<code>demo</code></h2><ul><li><strong>首先需要将Linux-内核学习-02中的驱动文件<code>helloDev.ko</code>插入, 然后查看内核日志，并查看当前内核的驱动</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  hello_demo sudo insmod helloDev.ko</span><br><span class="line">➜  hello_demo sudo dmesg</span><br><span class="line">[41194.279575] register_chrdev_region ok</span><br><span class="line">[41194.279578]  hello driver init </span><br><span class="line">➜  hello_demo sudo lsmod | head -n 10</span><br><span class="line">Module                  Size  Used by</span><br><span class="line">helloDev               16384  0</span><br><span class="line">rfcomm                 81920  4</span><br></pre></td></tr></table></figure><blockquote><p>查看内核日志可知<code>helloDev</code>设备驱动已插入</p></blockquote></li></ul><ul><li><strong>创建驱动文件</strong><br>使用<code>mknod</code>命令创建驱动文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  hello_demo sudo mknod /dev/hello c 232 0</span><br><span class="line">➜  hello_demo ls -l /dev/hello</span><br><span class="line">crw-r--r-- 1 Root root 232, 0 8月  29 22:52 /dev/hello</span><br></pre></td></tr></table></figure><blockquote><p><code>mknod</code>命令详解如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       mknod - make block or character special files</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       mknod [OPTION]... NAME TYPE [MAJOR MINOR]</span><br><span class="line">       主设备号 次设备号</span><br></pre></td></tr></table></figure></blockquote></li></ul><ul><li><p><strong>执行<code>demo</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  test_hello_demo sudo ./test_hello_demo</span><br><span class="line">fd : 3</span><br><span class="line">open success.</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><blockquote><p><code>open</code>,<code>write</code>和<code>read</code>都被成功执行了</p></blockquote></li><li><p><strong>删除驱动文件并查看当前内核日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  test_hello_demo sudo rm /dev/hello</span><br><span class="line">➜  test_hello_demo sudo dmesg</span><br><span class="line">[41194.279575] register_chrdev_region ok</span><br><span class="line">[41194.279578]  hello driver init</span><br><span class="line">[41274.403093] hello_open</span><br><span class="line">[41274.403152] hello_write</span><br><span class="line">[41274.403154] hello_read</span><br></pre></td></tr></table></figure><blockquote><p>示例<code>demo</code>中相继执行了<code>open</code>,<code>write</code>和<code>read</code>, 而内核日志中也相继执行了<code>hello_open</code>, <code>hello_write</code>和<code>hello_write</code></p></blockquote></li></ul><ul><li><strong>卸载设备驱动</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  test_hello_demo sudo rmmod helloDev</span><br><span class="line">➜  test_hello_demo sudo dmesg</span><br><span class="line">[41194.279575] register_chrdev_region ok</span><br><span class="line">[41194.279578]  hello driver init</span><br><span class="line">[41274.403093] hello_open</span><br><span class="line">[41274.403152] hello_write</span><br><span class="line">[41274.403154] hello_read</span><br><span class="line">[41346.707954] unregister_chrdev_region ok</span><br></pre></td></tr></table></figure><blockquote><p>查看内核日志可知设备驱动成功被卸载</p></blockquote></li></ul><h1 id="调用过程分析"><a href="#调用过程分析" class="headerlink" title="调用过程分析"></a>调用过程分析</h1><p>内核的调用过程如下图[应用层write-&gt;内核-&gt;驱动]所示, <strong>最终实现了<code>file-&gt;f_op-&gt;write(file, p, count, pos)</code>的调用, 其中<code>f_op</code>是<code>struct file_operations</code>类型的变量, 结构内定义了文件操作的相关函数类型, 并在驱动设备初始化时初始化了write, 如图[f_op的初始化]所示</strong><br><img src="/images/write2write.png" alt="应用层write-&gt;内核-&gt;驱动"><br><img src="/images/driverWrite.png" alt="f_op的初始化"></p>]]></content>
      
      
      <categories>
          
          <category> Linux内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, 驱动开发, Linux内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-内核学习-02</title>
      <link href="/2021/08/29/Linux-%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0-02/"/>
      <url>/2021/08/29/Linux-%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0-02/</url>
      
        <content type="html"><![CDATA[<h1 id="实现一个字符设备驱动"><a href="#实现一个字符设备驱动" class="headerlink" title="实现一个字符设备驱动"></a>实现一个字符设备驱动</h1><h2 id="字符串设备驱动的框架"><a href="#字符串设备驱动的框架" class="headerlink" title="字符串设备驱动的框架"></a>字符串设备驱动的框架</h2><p>字符串设备驱动的框架包括以下三个函数：</p><p>驱动的入口函数是<code>module_init(fun_init)</code><br>驱动的出口函数是<code>module_exit(fun_exit)</code><br>驱动的版权函数是<code>MODULE_LICENSE(&quot;GPL&quot;)</code></p><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><p>驱动的入口函数<code>module_init(fun_init)</code>负责在内核中申请设备号，定义设备类型对象，设置该设备对应的打开，读，写等操作；并把设备号与设备对象关联起来，把设备对象与文件操作关联起来；</p><ul><li><p><strong>在内核中申请设备号</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reg_major是主设备号，reg_minor是次设备号</span></span><br><span class="line"><span class="comment">// 用主次设备号生成一个设备号devNum</span></span><br><span class="line">devNum = MKDEV(reg_major, reg_minor);</span><br><span class="line"><span class="comment">// 在内核中注册该设备号，在内核中唯一标识了一个id，该id在内核中不能被其他设备暂用</span></span><br><span class="line"><span class="comment">// subDevNum表示目前开始注册第subDevNum个设备号</span></span><br><span class="line"><span class="keyword">if</span>(OK == register_chrdev_region(devNum, subDevNum, <span class="string">&quot;helloworld&quot;</span>))&#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;register_chrdev_region ok \n&quot;</span>); </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">printk(KERN_EMERG<span class="string">&quot;register_chrdev_region error n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line">printk(KERN_EMERG<span class="string">&quot; hello driver init \n&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>定义字符设备类型对象</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cdev表示一个字符设备</span></span><br><span class="line">gDev = kzalloc(<span class="keyword">sizeof</span>(struct cdev), GFP_KERNEL);</span><br></pre></td></tr></table></figure></li><li><p><strong>定义相关操作</strong><br>linux把设备也抽象成文件，所以要定义文件的读写相关操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux中设备也是文件，可以用file_operations来定义一些对文件操作的函数</span></span><br><span class="line">gFile = kzalloc(<span class="keyword">sizeof</span>(struct file_operations), GFP_KERNEL);</span><br><span class="line"><span class="comment">// 对要制作的字符串设备驱动定义 打开，读，写的操作函数</span></span><br><span class="line">gFile-&gt;open = hello_open;</span><br><span class="line">gFile-&gt;read = hello_read;</span><br><span class="line">gFile-&gt;write = hello_write;</span><br><span class="line">gFile-&gt;owner = THIS_MODULE;</span><br></pre></td></tr></table></figure></li><li><p><strong>把设备号与设备对象关联起来，把设备对象与文件操作关联起来</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符设备初始化，把字符设备驱动和该驱动相关的操作函数联系起来</span></span><br><span class="line">cdev_init(gDev, gFile);</span><br><span class="line"><span class="comment">// 设定该字符驱动的在内核中的设备号，1表示我们注册了一个设备</span></span><br><span class="line">cdev_add(gDev, devNum, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>操作函数的定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello_open</span><span class="params">(struct inode *p, struct file *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;hello_open\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_write</span><span class="params">(struct file *f, <span class="keyword">const</span> <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;hello_write\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_read</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;hello_read\r\n&quot;</span>);      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="出口函数"><a href="#出口函数" class="headerlink" title="出口函数"></a>出口函数</h2><p>驱动的出口函数是<code>module_exit(fun_exit)</code>负责卸载该设备的相关操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printk(KERN_EMERG<span class="string">&quot;unregister_chrdev_region ok \n&quot;</span>); </span><br><span class="line">cdev_del(gDev);</span><br><span class="line">unregister_chrdev_region(devNum, subDevNum);</span><br></pre></td></tr></table></figure><h2 id="许可协议"><a href="#许可协议" class="headerlink" title="许可协议"></a>许可协议</h2><p><a href="https://baike.baidu.com/item/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81/393832?fromtitle=GPL&amp;fromid=2357903&amp;fr=aladdin">GPL说明</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_MAX    (10)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK            (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR         (-1)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> *<span class="title">gDev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">gFile</span>;</span></span><br><span class="line"><span class="keyword">dev_t</span>  devNum;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> subDevNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> reg_major  =  <span class="number">232</span>;    </span><br><span class="line"><span class="keyword">int</span> reg_minor =   <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *buffer;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello_open</span><span class="params">(struct inode *p, struct file *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;hello_open\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_write</span><span class="params">(struct file *f, <span class="keyword">const</span> <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;hello_write\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_read</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;hello_read\r\n&quot;</span>);      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// reg_major是主设备号，reg_minor是次设备号</span></span><br><span class="line">    <span class="comment">// 用主次设备号生成一个设备号devNum</span></span><br><span class="line">    devNum = MKDEV(reg_major, reg_minor);</span><br><span class="line"><span class="comment">// 在内核中注册该设备号，在内核中唯一标识了一个id，该id在内核中不能被其他设备暂用</span></span><br><span class="line"><span class="comment">// subDevNum表示目前开始注册第subDevNum个设备号</span></span><br><span class="line">    <span class="keyword">if</span>(OK == register_chrdev_region(devNum, subDevNum, <span class="string">&quot;helloworld&quot;</span>))&#123;</span><br><span class="line">        printk(KERN_EMERG<span class="string">&quot;register_chrdev_region ok \n&quot;</span>); </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot;register_chrdev_region error n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(KERN_EMERG<span class="string">&quot; hello driver init \n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cdev表示一个字符设备</span></span><br><span class="line">    gDev = kzalloc(<span class="keyword">sizeof</span>(struct cdev), GFP_KERNEL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// linux中设备也是文件，可以用file_operations来定义一些对文件操作的函数</span></span><br><span class="line">    gFile = kzalloc(<span class="keyword">sizeof</span>(struct file_operations), GFP_KERNEL);</span><br><span class="line"><span class="comment">// 对要制作的字符串设备驱动定义 打开，读，写的操作函数</span></span><br><span class="line">    gFile-&gt;open = hello_open;</span><br><span class="line">    gFile-&gt;read = hello_read;</span><br><span class="line">    gFile-&gt;write = hello_write;</span><br><span class="line">    gFile-&gt;owner = THIS_MODULE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符设备初始化，把字符设备驱动和该驱动相关的操作函数联系起来</span></span><br><span class="line">    cdev_init(gDev, gFile);</span><br><span class="line"><span class="comment">// 设定该字符驱动的在内核中的设备号，1表示我们注册了一个设备</span></span><br><span class="line">    cdev_add(gDev, devNum, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(KERN_EMERG<span class="string">&quot;unregister_chrdev_region ok \n&quot;</span>); </span><br><span class="line">    cdev_del(gDev);</span><br><span class="line">    unregister_chrdev_region(devNum, subDevNum);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Makefile文件"><a href="#Makefile文件" class="headerlink" title="Makefile文件"></a>Makefile文件</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">obj-m := helloDev.o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"><span class="comment">#KDIR:= /lib/modules/4.4.0-31-generic/build</span></span><br><span class="line">KDIR := /lib/modules/`uname -r`/build</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o *.ko *.mod.c *.symvers *.c~ *~</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>Makefile</code>文件说明</strong><br><strong> 执行<code>Makefile</code>时, <code>KERNELRELEASE</code>是空, 所以执行到了<code>else</code>; </strong> PWD变量是为了二次执行该<code>Makefile</code>;<br><strong> KDIR是内核开发包的路径，在该路径执行玩Makefile后, <code>KERNELRELEASE</code>变成非空</strong> 参数M表示在路径<code>KDIR</code>下执行完后, 回到<code>PWD</code>路径执行<code>Makefile</code><br>** 回到当前路径二次执行<code>Makefile</code>时, 内核会收集所有<code>obj-m</code>对象, 把源文件加工为<code>.o</code>文件；在把<code>.o</code>文件加工为<code>.ko</code>文件</li></ul><blockquote><p><code>.ko</code>文件是驱动文件</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="驱动的插入"><a href="#驱动的插入" class="headerlink" title="驱动的插入"></a>驱动的插入</h2><ul><li><p><strong>为了方便查看内核日志，先清理内核日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dmesg -c</span><br></pre></td></tr></table></figure></li><li><p><strong>插入驱动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  hello_demo sudo insmod helloDev.ko</span><br><span class="line">➜  hello_demo sudo dmesg <span class="comment"># 查看内核日志</span></span><br><span class="line">[21306.529205] helloDev: loading out-of-tree module taints kernel.</span><br><span class="line">[21306.529243] helloDev: module verification failed: signature and/or required key missing - tainting kernel</span><br><span class="line">[21306.529880] register_chrdev_region ok</span><br><span class="line">[21306.529882]  hello driver init</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看内核驱动"><a href="#查看内核驱动" class="headerlink" title="查看内核驱动"></a>查看内核驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  hello_demo lsmod | head -n 10</span><br><span class="line">Module                  Size  Used by</span><br><span class="line">helloDev               16384  0</span><br><span class="line">rfcomm                 81920  4</span><br><span class="line">ccm                    20480  3</span><br><span class="line">joydev                 28672  0</span><br><span class="line">cmac                   16384  1</span><br><span class="line">bnep                   24576  2</span><br><span class="line">snd_hda_codec_hdmi     61440  1</span><br><span class="line">snd_sof_pci            20480  0</span><br><span class="line">snd_sof_intel_hda_common    65536  1 snd_sof_pci</span><br></pre></td></tr></table></figure><p>由于helloDev驱动还未被使用， 所以<code>Used by</code>还是<code>0</code></p><h2 id="驱动的卸载"><a href="#驱动的卸载" class="headerlink" title="驱动的卸载"></a>驱动的卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  hello_demo sudo rmmod helloDev</span><br><span class="line">➜  hello_demo sudo dmesg -c <span class="comment"># 查看内核日志并删除内核日志</span></span><br><span class="line">[22011.735186] unregister_chrdev_region ok</span><br></pre></td></tr></table></figure><ul><li><strong>查看内核日志, 驱动已被卸载</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  hello_demo lsmod | head -n 10</span><br><span class="line">Module                  Size  Used by</span><br><span class="line">rfcomm                 81920  4</span><br><span class="line">ccm                    20480  3</span><br><span class="line">joydev                 28672  0</span><br><span class="line">cmac                   16384  1</span><br><span class="line">bnep                   24576  2</span><br><span class="line">snd_hda_codec_hdmi     61440  1</span><br><span class="line">snd_sof_pci            20480  0</span><br><span class="line">snd_sof_intel_hda_common    65536  1 snd_sof_pci</span><br><span class="line">snd_soc_hdac_hda       24576  1 snd_sof_intel_hda_common</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, 驱动开发, Linux内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows上将linux目录映射网络驱动器</title>
      <link href="/2021/08/27/Windows%E4%B8%8A%E5%B0%86linux%E7%9B%AE%E5%BD%95%E6%98%A0%E5%B0%84%E7%BD%91%E7%BB%9C%E9%A9%B1%E5%8A%A8%E5%99%A8/"/>
      <url>/2021/08/27/Windows%E4%B8%8A%E5%B0%86linux%E7%9B%AE%E5%BD%95%E6%98%A0%E5%B0%84%E7%BD%91%E7%BB%9C%E9%A9%B1%E5%8A%A8%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h2><p><a href="[samba（软件）_百度百科 (baidu.com">samba介绍</a>](<a href="https://baike.baidu.com/item/samba/455025?fr=aladdin">https://baike.baidu.com/item/samba/455025?fr=aladdin</a>))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> sudo vim /etc/samba/smb.conf</span><br><span class="line"><span class="comment"># 在文件末尾添加以下内容</span></span><br><span class="line">security = tangshp</span><br><span class="line">[public]</span><br><span class="line">    path = /home/tangshp</span><br><span class="line">    public = yes</span><br><span class="line">    writeable = yes</span><br><span class="line">    browseable = yes</span><br><span class="line">    guest ok = yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>public</code>的命名后续会被用到</p><h2 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /home/tangshp</span><br></pre></td></tr></table></figure><h2 id="重启smbd生效"><a href="#重启smbd生效" class="headerlink" title="重启smbd生效"></a>重启smbd生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/smbd restart</span><br></pre></td></tr></table></figure><h1 id="在windows上映射网络驱动器"><a href="#在windows上映射网络驱动器" class="headerlink" title="在windows上映射网络驱动器"></a>在windows上映射网络驱动器</h1><p><img src="/images/netDrivers.png" alt="网络驱动器"></p><blockquote><p>注意<code>ip</code>地址后的路径必须使用之前的<code>public</code>，必须要一致</p></blockquote><p>最终效果如下图</p><p><img src="/images/netDriversNAT.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> Linux的基本使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络驱动器 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-内核学习-01</title>
      <link href="/2021/08/15/Linux-%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0-01/"/>
      <url>/2021/08/15/Linux-%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0-01/</url>
      
        <content type="html"><![CDATA[<h1 id="生成linux-4-9-229内核镜像"><a href="#生成linux-4-9-229内核镜像" class="headerlink" title="生成linux-4.9.229内核镜像"></a>生成linux-4.9.229内核镜像</h1><h2 id="源码编译linux-4-9-229内核"><a href="#源码编译linux-4-9-229内核" class="headerlink" title="源码编译linux-4.9.229内核"></a>源码编译linux-4.9.229内核</h2><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><blockquote><p>ubuntu 18.04<br>linux-4.9.229<br>busybox-1.30.0<br>qemu-system-x86_64</p></blockquote><h3 id="编译过程说明"><a href="#编译过程说明" class="headerlink" title="编译过程说明"></a>编译过程说明</h3><p>1.下载<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.9.229.tar.gz">linux-4.9.229.tar.gz</a>并解压，进入<code>linux-4.9.229</code></p><p>2.`linux-4.9.229/arch/‘中包含很多框架的代码, 为了减少安装编译器的过程，我在本例中使用的是x86<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  linux-4.9.229 <span class="built_in">export</span> ARCH=x86</span><br></pre></td></tr></table></figure></p><p>3.生成默认编译选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  linux-4.9.229 make x86_64_defconfig</span><br></pre></td></tr></table></figure><br>默认配置文件被写入<code>.config</code>中。</p><p>4.自定义编译选项, 配置内核<br>这一步其实是对第2步的菜单进行微调，我们需要内核支持ramdisk驱动，所以需要选中如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  linux-4.9.229 make menuconfig</span><br></pre></td></tr></table></figure></p><blockquote><p>执行该命令后可能会报<code>fatal error: curses.h: 没有那个文件或目录</code>的错误, 则应该安装<code>libncurses5-dev</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure></p></blockquote><p>安如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">General setup  ---&gt;</span><br><span class="line"></span><br><span class="line">       ----&gt; [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support</span><br><span class="line"></span><br><span class="line">    Device Drivers  ---&gt;</span><br><span class="line"></span><br><span class="line">       [*] Block devices  ---&gt;</span><br><span class="line"></span><br><span class="line">               &lt;*&gt;   RAM block device support</span><br><span class="line"></span><br><span class="line">               (65536) Default RAM disk size (kbytes)</span><br></pre></td></tr></table></figure></p><ol><li>编译内核<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><blockquote><p>编译成功后的内核在<code>arch/x86_64/boot/bzImage</code></p></blockquote></li></ol><hr><h1 id="一个最小的busybox文件系统"><a href="#一个最小的busybox文件系统" class="headerlink" title="一个最小的busybox文件系统"></a>一个最小的busybox文件系统</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>1.下载<a href="https://busybox.net/downloads/busybox-1.30.0.tar.bz2">busybox-1.30.0.tar.bz2</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar xvf busybox-1.30.0.tar.bz2</span></span><br></pre></td></tr></table></figure></p><p>2.配置busybox源码</p><blockquote><p>在这里我们把busybox配置为静态编译，这样busybox在运行的时候就不需要额外的动态链接库了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make menuconfig</span></span><br><span class="line"></span><br><span class="line">Busybox Settings  ---&gt;</span><br><span class="line">      Build Options  ---&gt;</span><br><span class="line">            [*] Build BusyBox as a static binary (no shared libs)</span><br></pre></td></tr></table></figure></p></blockquote><p>3.编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><blockquote><p>不用担心<code>install</code>会安装到系统的文件中，没有加<code>sudo</code>权限；编译完成后的<code>busybox</code>就安装在源码根目录下的<code>_install</code>目录了; <code>_install/usr/bin</code>内中任意一个文件<code>file</code>都是链接到<code>busybox</code>这么一个可执行文件，运行时，<code>file</code>是<code>busybox</code>的参数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  _install ls</span><br><span class="line">bin  linuxrc  sbin  usr</span><br></pre></td></tr></table></figure><ul><li><code>_install</code>下的文件不是一个完整的文件系统，需要完善；内核不能直接使用这些文件，所以完善后也不能直接使用；需要需要把这些文件打包成内核可识别的文件系统。</li></ul><h2 id="补充一些必要的文件"><a href="#补充一些必要的文件" class="headerlink" title="补充一些必要的文件"></a>补充一些必要的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir etc dev mnt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir -p proc sys tmp mnt </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir -p etc/init.d/ # 该文件夹存放一些开机启动的脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim etc/fstab # 存放一些挂载的文件信息</span></span><br><span class="line">proc        /proc           proc         defaults        0        0</span><br><span class="line">tmpfs       /tmp            tmpfs    　　defaults        0        0</span><br><span class="line">sysfs       /sys            sysfs        defaults        0        0</span><br><span class="line"><span class="comment"># 把proc虚拟文件系统挂载在/proc下</span></span><br><span class="line"><span class="comment"># 把临时文件系统挂载在/tmp下</span></span><br><span class="line"><span class="comment"># sysfs文件系统挂载在/sys下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim etc/init.d/rcS # 启动要运行的文件</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Welcome to tinyLinux&quot;</span></span><br><span class="line">/bin/mount -a <span class="comment"># 把etc/fstab下的要挂载的文件挂载</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Remounting the root filesystem&quot;</span></span><br><span class="line">mount  -o  remount,rw  / <span class="comment"># 重新挂载根文件系统, 使得跟文件系统可读可写</span></span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -t devpts devpts /dev/pts <span class="comment"># 挂载文件系统</span></span><br><span class="line"><span class="built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug <span class="comment"># 处理热插拔</span></span><br><span class="line">mdev -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod 755 etc/init.d/rcS #busybox在启动运行的一段代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim etc/inittab # busybox的一些启动文件</span></span><br><span class="line">::sysinit:/etc/init.d/rcS <span class="comment"># 调用rcS文件运行</span></span><br><span class="line">::respawn:-/bin/sh <span class="comment"># 使得可以在控制台使用命令</span></span><br><span class="line">::askfirst:-/bin/sh</span><br><span class="line">::ctrlaltdel:/bin/umount -a -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod 755 etc/inittab</span></span><br><span class="line"><span class="comment"># cd dev</span></span><br><span class="line"><span class="comment"># mknod console c 5 1</span></span><br><span class="line"><span class="comment"># mknod null c 1 3</span></span><br><span class="line"><span class="comment"># mknod tty1 c 4 1</span></span><br></pre></td></tr></table></figure><blockquote><p>这样一个最小的、完整的可以被内核启动的文件系统就齐活啦。</p></blockquote><p>2.制作根文件系统镜像文件</p><blockquote><p>思路<br>   1.先制作一个空的镜像文件；<br>   2.然后把此镜像文件格式化为ext3格式；<br>   3.然后把此镜像文件挂载，并把根文件系统复制到挂载目录；<br>   4.卸载该镜像文件。<br>   5.打成gzip包。<br>打包脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm -rf rootfs.ext3</span><br><span class="line">rm -rf fs</span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=./rootfs.ext3 bs=1M count=32</span><br><span class="line">mkfs.ext3 rootfs.ext3</span><br><span class="line">mkdir fs</span><br><span class="line">mount -o loop rootfs.ext3 ./fs</span><br><span class="line">cp -rf ./_install/* ./fs</span><br><span class="line">umount ./fs</span><br><span class="line">gzip --best -c rootfs.ext3 &gt; rootfs.img.gz</span><br></pre></td></tr></table></figure><br>最终生成的文件系统镜像名字为：rootfs.img.gz</p><p>在ubuntu20.04中, 树莓派4B+8G的软硬件环境编译<code>busybox</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------------环境配置</span></span><br><span class="line"><span class="comment">#       aarch64-linux-gnu-g++</span></span><br><span class="line">sudo apt install -y g++ g++-aarch64-linux-gnu </span><br><span class="line"><span class="comment">#       menuconfig</span></span><br><span class="line">sudo apt install -y libncurses5-dev flex bison</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------编译过程</span></span><br><span class="line"><span class="comment">#下载源码</span></span><br><span class="line">wget https://busybox.net/downloads/busybox-1.31.1.tar.bz2</span><br><span class="line">tar -jxvf busybox-1.31.1.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> busybox-1.31.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成默认编译配置    生成文件大小约2.04MB。</span></span><br><span class="line">make defconfig    </span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑配置</span></span><br><span class="line">make menuconfig</span><br><span class="line"><span class="comment">#Settings ---&gt;</span></span><br><span class="line"><span class="comment">#    --- Build Options</span></span><br><span class="line"><span class="comment">#    [ ] Build static binary (no shared libs)   #按“空格键”勾选此项。</span></span><br><span class="line"></span><br><span class="line">make -j8 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-    <span class="comment">#-j8代表8线程编译</span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="qemu模拟器启动"><a href="#qemu模拟器启动" class="headerlink" title="qemu模拟器启动"></a>qemu模拟器启动</h1><p>1.安装模拟器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo apt-get install qemu-system-x86</span><br></pre></td></tr></table></figure></p><p>2.通过qemu模拟器启动我们自己编译的内核和文件系统：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># qemu-system-x86_64 \</span></span><br><span class="line">  -kernel ./linux-4.9.229/arch/x86_64/boot/bzImage  \</span><br><span class="line">  -initrd ./busybox-1.30.0/rootfs.img.gz   \</span><br><span class="line">  -append <span class="string">&quot;root=/dev/ram init=/linuxrc&quot;</span>  \</span><br><span class="line">  -serial file:output.txt</span><br></pre></td></tr></table></figure></p><h1 id="在树莓派-buntu20-04编译"><a href="#在树莓派-buntu20-04编译" class="headerlink" title="在树莓派+buntu20.04编译"></a>在树莓派+buntu20.04编译</h1><p>&gt;</p><h2 id="编译Linux内核"><a href="#编译Linux内核" class="headerlink" title="编译Linux内核"></a>编译Linux内核</h2><blockquote><p>编译流程与前述类似, 不同之处在以下; 同时编译得到的内核位于<code>Linux_ws/linux-4.9.229/arch/arm64/boot/Image</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ARCH=arm64</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=aarch64-linux-gnu-</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="编译busybox文件系统"><a href="#编译busybox文件系统" class="headerlink" title="编译busybox文件系统"></a>编译busybox文件系统</h2><p>1.编译流程与前述类似, 不同之处在需修改<code>busybox-1.30.0/util-linux/rdata.c</code>,添加<code>stime</code>函数定义;<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">time_t</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">        tv.tv_sec = *t;</span><br><span class="line">        tv.tv_usec = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> settimeofday(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.修改<code>fstab</code>文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  busybox-1.30.0 cat ./_install/etc/fstab</span><br><span class="line">proc        /proc           proc         defaults        0        0</span><br><span class="line">sysfs       /sys            sysfs        defaults        0        0</span><br><span class="line"><span class="comment">#tmpfs       /tmp            tmpfs    　　defaults        0        0</span></span><br></pre></td></tr></table></figure></p><p>3.修改打包方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  _install <span class="built_in">pwd</span></span><br><span class="line">/home/tangshp/Tools/Linux_ws/busybox-1.30.0/_install</span><br><span class="line">➜  _install find . | cpio -o --format=newc &gt; rootfs.img</span><br><span class="line">➜  busybox-1.30.0 cp ./_install/rootfs.img ./</span><br></pre></td></tr></table></figure></p><h2 id="使用模拟器启动"><a href="#使用模拟器启动" class="headerlink" title="使用模拟器启动"></a>使用模拟器启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  Linux_ws ls</span><br><span class="line">busybox-1.30.0  linux-4.9.229</span><br><span class="line">➜  Linux_ws sudo qemu-system-aarch64 -cpu cortex-a72 -machine <span class="built_in">type</span>=virt -nographic -smp 8 -m 1024M -kernel ./linux-4.9.229/arch/arm64/boot/Image -append <span class="string">&quot;root=/dev/ram rdinit=/linuxrc&quot;</span> -initrd ./busybox-1.30.0/rootfs.img -device virtio-scsi-device</span><br></pre></td></tr></table></figure><ul><li>退出<code>qemu-system-aarch64</code><blockquote><p>按下<kbd>ctrl</kbd>+<kbd>a</kbd> 后松开;按下<kbd>x</kbd></p></blockquote></li></ul><p><a href="https://www.bilibili.com/read/cv11271232">1.文档参考</a><br><a href="https://www.bilibili.com/video/BV1Vo4y117Xx">2.视频参考</a><br><a href="https://blog.csdn.net/u010739216/article/details/113914370">3.Ubuntu上使用qemu模拟Arm64 linux</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C, 驱动开发, Linux内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令</title>
      <link href="/2021/08/15/Linux-%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/08/15/Linux-%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h1><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  drivers du -sh</span><br><span class="line">491M.</span><br></pre></td></tr></table></figure><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure><p><img src="/images/htopRes.png" alt="htop查看cpu运行状态及进程信息"></p><h2 id="nproc"><a href="#nproc" class="headerlink" title="$(nproc)"></a><code>$(nproc)</code></h2><h2 id="查看cpu温度"><a href="#查看cpu温度" class="headerlink" title="查看cpu温度"></a>查看cpu温度</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ ~ cat /sys/class/thermal/thermal_zone0/temp</span><br><span class="line">36511 <span class="comment"># 36511/1000 = 36.511 C°</span></span><br></pre></td></tr></table></figure><h2 id="查看cpu当前的频率"><a href="#查看cpu当前的频率" class="headerlink" title="查看cpu当前的频率"></a>查看cpu当前的频率</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq</span><br><span class="line">[sudo] password <span class="keyword">for</span> tangshp:</span><br><span class="line">1500000 <span class="comment"># hz</span></span><br></pre></td></tr></table></figure><h1 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜ Blog ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line"><span class="comment"># 回环接口</span></span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line"><span class="comment"># 以太网</span></span><br><span class="line">3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line"><span class="comment"># 无线</span></span><br></pre></td></tr></table></figure><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><ul><li>递归地创建父级子级目录<br><code>mkdir -p aa/bb/cc</code><blockquote><p>如果aa不存在, 先创建aa; 如果bb不存在, 再继续创建bb; 最终创建cc</p></blockquote></li></ul><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="递归地添加权限"><a href="#递归地添加权限" class="headerlink" title="递归地添加权限"></a>递归地添加权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 720 /home/ismail/</span><br></pre></td></tr></table></figure><h1 id="第三方工具的使用"><a href="#第三方工具的使用" class="headerlink" title="第三方工具的使用"></a>第三方工具的使用</h1><h2 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h2><blockquote><p>pm2的安装参考<a href="/2021/09/02/Linux常用工具安装/index.html">pm2的安装</a></p><ul><li>使用pm2让hexo在后台运行</li></ul><ol><li>新建脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line">exec(<span class="string">&#x27;hexo server&#x27;</span>,<span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol><li>使用pm2运行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ Blog pm2 start run.js</span><br></pre></td></tr></table></figure><img src="/images/pmstart.png" alt="pm2 start run.js"></li></ol><ul><li>其它基本用法</li></ul><ol><li><p>查看进程状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ Blog pm2 list</span><br></pre></td></tr></table></figure></li><li><p>重启运用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app.js</span><br></pre></td></tr></table></figure></li><li><p>停止特定的应用。可以先通过pm2 list获取应用的名字（—name指定的）或者进程id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop app_name|app_id</span><br></pre></td></tr></table></figure></li><li><p>停止所有应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop all</span><br></pre></td></tr></table></figure></li></ol><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h2 id="本地与全局"><a href="#本地与全局" class="headerlink" title="本地与全局"></a>本地与全局</h2><p>npm的包安装分为本地安装<code>local</code>、全局安装<code>global</code>两种，从敲的命令行来看，差别只是有没有<code>-g</code>而已，比如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt <span class="comment"># 本地安装</span></span><br><span class="line">npm install -g grunt-cli <span class="comment"># 全局安装</span></span><br></pre></td></tr></table></figure><br>主要区别在于:</p><ul><li>本地安装<br><strong> 将安装包放在<code>./node_modules</code>下（运行<code>npm</code>时所在的目录）</strong> 可以通过<code>require()</code>来引入本地安装的包</li><li>全局安装<br><strong> 将安装包放在<code>/usr/local</code>下</strong> 可以直接在命令行里使用</li></ul><h2 id="—save"><a href="#—save" class="headerlink" title="—save"></a>—save</h2><ul><li>在<code>npm 5</code>之前的版本<br>使用<code>npm install</code>默认选项安装包时，仅仅会把包下载到<code>node_modules/</code>中，并不会同时修改 <code>package.json</code>。而使用<code>--save</code>选项就可以在安装包的同时，修改<code>package.json</code>文件</li><li>在<code>npm 5</code>之后的版本<br><code>npm install</code>安装包时，默认便会修改<code>package.json</code>文件，所以<code>--save</code>选项已经不再需要了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux的基本使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use markdown in hexo</title>
      <link href="/2021/08/08/Use-markdown-in-hexo/"/>
      <url>/2021/08/08/Use-markdown-in-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br><span class="line"></span><br><span class="line">Alternatively, for H1 and H2, an underline-ish style:</span><br><span class="line"></span><br><span class="line"><span class="section">Alt-H1</span></span><br><span class="line"><span class="section">======</span></span><br><span class="line"></span><br><span class="line"><span class="section">Alt-H2</span></span><br><span class="line"><span class="section">------</span></span><br></pre></td></tr></table></figure><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><p>Alternatively, for H1 and H2, an underline-ish style:</p><h1 id="Alt-H1"><a href="#Alt-H1" class="headerlink" title="Alt-H1"></a>Alt-H1</h1><h2 id="Alt-H2"><a href="#Alt-H2" class="headerlink" title="Alt-H2"></a>Alt-H2</h2><h1 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Emphasis, aka italics, with <span class="emphasis">*asterisks*</span> or <span class="emphasis">_underscores_</span>.</span><br><span class="line"></span><br><span class="line">Strong emphasis, aka bold, with <span class="strong">**asterisks**</span> or <span class="strong">__underscores__</span>.</span><br><span class="line"></span><br><span class="line">Combined emphasis with <span class="strong">**asterisks and <span class="emphasis">_underscores_</span>**</span>.</span><br><span class="line"></span><br><span class="line">Strikethrough uses two tildes. ~~Scratch this.~~</span><br></pre></td></tr></table></figure><p>Emphasis, aka italics, with <em>asterisks</em> or _underscores_.</p><p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p><p>Combined emphasis with <strong>asterisks and _underscores_</strong>.</p><p>Strikethrough uses two tildes. <del>Scratch this.</del></p><h1 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> First ordered list item</span><br><span class="line"><span class="bullet">2.</span> Another item</span><br><span class="line"><span class="bullet">  *</span> Unordered sub-list.</span><br><span class="line"><span class="bullet">1.</span> Actual numbers don&#x27;t matter, just that it&#x27;s a number</span><br><span class="line"><span class="bullet">  1.</span> Ordered sub-list</span><br><span class="line"><span class="bullet">4.</span> And another item.</span><br><span class="line"></span><br><span class="line">   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#x27;ll use three here to also align the raw Markdown).</span><br><span class="line"></span><br><span class="line">   To have a line break without a paragraph, you will need to use two trailing spaces.  </span><br><span class="line">   Note that this line is separate, but within the same paragraph.  </span><br><span class="line">   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Unordered list can use asterisks</span><br><span class="line"><span class="bullet">-</span> Or minuses</span><br><span class="line"><span class="bullet">+</span> Or pluses</span><br><span class="line"><span class="bullet">-</span> Paragraph In unordered list</span><br></pre></td></tr></table></figure><ol><li>First ordered list item</li><li>Another item<ul><li>Unordered sub-list.</li></ul></li><li>Actual numbers don’t matter, just that it’s a number<ol><li>Ordered sub-list</li></ol></li><li><p>And another item.</p><p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p><p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>Note that this line is separate, but within the same paragraph.<br>(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p></li></ol><ul><li>Unordered list can use asterisks</li></ul><ul><li>Or minuses</li></ul><ul><li>Or pluses</li></ul><ul><li>Paragraph In unordered list</li></ul><h1 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To reboot your computer, press <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>.<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Definition list&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span></span><br><span class="line"><span class="code">&lt;/dl&gt;</span></span><br></pre></td></tr></table></figure><dl>    <dt>Definition list</dt>    <dd>Is something people use sometimes.</dd>    <dt>Markdown in HTML</dt>    <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd></dl><h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">I&#x27;m an inline-style link</span>](<span class="link">https://www.google.com</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">I&#x27;m an inline-style link with title</span>](<span class="link">https://www.google.com &quot;Google&#x27;s Homepage&quot;</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">I&#x27;m a reference-style link</span>][<span class="symbol">Arbitrary case-insensitive reference text</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">I&#x27;m a relative reference to a repository file</span>](<span class="link">../blob/master/LICENSE</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">You can use numbers for reference-style link definitions</span>][<span class="symbol">1</span>]</span><br><span class="line"></span><br><span class="line">Or leave it empty and use the [link text itself]</span><br><span class="line"></span><br><span class="line">Some text to show that the reference links can follow later.</span><br><span class="line"></span><br><span class="line">[<span class="symbol">arbitrary case-insensitive reference text</span>]: <span class="link">https://hexo.io</span></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">https://hexo.io/docs/</span></span><br><span class="line">[<span class="symbol">link text itself</span>]: <span class="link">https://hexo.io/api/</span></span><br></pre></td></tr></table></figure><p><a href="https://www.google.com">I’m an inline-style link</a></p><p><a href="https://www.google.com" title="Google&#39;s Homepage">I’m an inline-style link with title</a></p><p><a href="https://hexo.io">I’m a reference-style link</a></p><p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p><p><a href="https://hexo.io/docs/">You can use numbers for reference-style link definitions</a></p><p>Or leave it empty and use the <a href="https://hexo.io/api/">link text itself</a></p><p>Some text to show that the reference links can follow later.</p><h1 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hover to see the title text:</span><br><span class="line"></span><br><span class="line">Inline-style:</span><br><span class="line"></span><br><span class="line">![<span class="string">alt text</span>](<span class="link">https://hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">Reference-style:</span><br><span class="line">![<span class="string">alt text</span>][<span class="symbol">logo</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">logo</span>]: <span class="link">https://hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 2&quot;</span></span><br></pre></td></tr></table></figure><p>hover to see the title text:</p><p>Inline-style:</p><p><img src="https://hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 1"></p><p>Reference-style:<br><img src="https://hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 2"></p><h1 id="Code-and-Syntax-Highlighting"><a href="#Code-and-Syntax-Highlighting" class="headerlink" title="Code and Syntax Highlighting"></a>Code and Syntax Highlighting</h1><p>Inline has it. <code>code back-ticks around</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;JavaScript syntax highlighting&quot;</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Python syntax highlighting&quot;</span></span><br><span class="line"><span class="built_in">print</span> s</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No language indicated, so no syntax highlighting.</span><br><span class="line">But let&#x27;s throw in a &lt;b&gt;tag&lt;/b&gt;.</span><br></pre></td></tr></table></figure><h1 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|                |ASCII                          |HTML                         |</span><br><span class="line">|----------------|-------------------------------|-----------------------------|</span><br><span class="line">|Single backticks|<span class="code">`&#x27;Isn&#x27;t this fun?&#x27;`</span>            |&#x27;Isn&#x27;t this fun?&#x27;            |</span><br><span class="line">|Quotes          |<span class="code">`&quot;Isn&#x27;t this fun?&quot;`</span>            |&quot;Isn&#x27;t this fun?&quot;            |</span><br><span class="line">|Dashes          |<span class="code">`-- is en-dash, --- is em-dash`</span>|-- is en-dash, --- is em-dash|</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>ASCII</th><th>HTML</th></tr></thead><tbody><tr><td>Single backticks</td><td><code>&#39;Isn&#39;t this fun?&#39;</code></td><td>‘Isn’t this fun?’</td></tr><tr><td>Quotes</td><td><code>&quot;Isn&#39;t this fun?&quot;</code></td><td>“Isn’t this fun?”</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>— is en-dash, —- is em-dash</td></tr></tbody></table></div><p>Colons can be used to align columns.<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned |  |</span><br><span class="line">| col 2 is      | centered      |    |</span><br><span class="line">| zebra stripes | are neat      |   </span><br></pre></td></tr></table></figure><br>| Tables        | Are           | Cool  |<br>| ——————- |:——————-:| ——-:|<br>| col 3 is      | right-aligned |  |<br>| col 2 is      | centered      |    |<br>| zebra stripes | are neat      |</p><p>The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Markdown | Less | Pretty</span><br><span class="line">--- | --- | ---</span><br><span class="line"><span class="emphasis">*Still*</span> | <span class="code">`renders`</span> | <span class="strong">**nicely**</span></span><br><span class="line">1 | 2 | 3</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>Markdown</th><th>Less</th><th>Pretty</th></tr></thead><tbody><tr><td><em>Still</em></td><td><code>renders</code></td><td><strong>nicely</strong></td></tr><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table></div><h1 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;You can find more information about <span class="strong">**LaTeX**</span> mathematical expressions [<span class="string">here</span>](<span class="link">https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</span>).</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>You can find more information about <strong>LaTeX</strong> mathematical expressions <a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h1 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h1><p>Three or more …</p><h2 id><a href="#" class="headerlink" title></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">Hyphens</span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Asterisks</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="strong">__<span class="emphasis">_</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">Underscores</span></span></span></span></span><br></pre></td></tr></table></figure></h2><p>Hyphens</p><hr><p>Asterisks</p><hr><p>Underscores</p><h1 id="New-Blockquotes"><a href="#New-Blockquotes" class="headerlink" title="New Blockquotes"></a>New Blockquotes</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">        &lt;td&gt;Foo&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="code">&lt;/table&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></table></figure><p>This is a regular paragraph.</p><table>    <tr>        <td>Foo</td>    </tr></table><p>This is another regular paragraph.</p><h1 id="Youtube-Videos"><a href="#Youtube-Videos" class="headerlink" title="Youtube Videos"></a>Youtube Videos</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.youtube.com/watch?feature=player_embedded&amp;v=ARted4RniaU</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.youtube.com/vi/ARted4RniaU/0.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="attr">alt</span>=<span class="string">&quot;IMAGE ALT TEXT HERE&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">border</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Pure markdown version:</span><br><span class="line"></span><br><span class="line">[<span class="string">![IMAGE ALT TEXT HERE</span>](<span class="link">https://img.youtube.com/vi/ARted4RniaU/0.jpg</span>)](<span class="link">https://www.youtube.com/watch?v=ARted4RniaU</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?feature=player_embedded&v=ARted4RniaU" target="_blank"><img src="https://img.youtube.com/vi/ARted4RniaU/0.jpg" alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10"></a></p><p>Pure markdown version:</p><p><a href="https://www.youtube.com/watch?v=ARted4RniaU"><img src="https://img.youtube.com/vi/ARted4RniaU/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p><p>参考:<br><a href="https://hexo.io/docs/">1</a>.<a href="https://butterfly.js.org/posts/89757140/#Inline-HTML">use markdown in hexo</a><br>[2].<a href="https://butterfly.js.org/posts/4aa8abbe">个性设置</a><br>[3].<a href="https://tool.lu/tables/">table to markdown</a><br>[4].<a href="https://blog.csdn.net/Aoman_Hao/article/details/81381507?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.no_search_link&amp;spm=1001.2101.3001.4242">Hexo博客里添加对mathjax的支持</a><br>[5].<a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax basic tutorial and quick reference</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo本身 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh连接服务器</title>
      <link href="/2021/08/08/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/08/08/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><h2 id="1-1-查看是否安装openssh-server"><a href="#1-1-查看是否安装openssh-server" class="headerlink" title="1.1.查看是否安装openssh-server"></a>1.1.查看是否安装openssh-server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/ssh/</span><br><span class="line">moduli      sshd_config         ssh_host_ecdsa_key.pub  ssh_host_ed25519_key.pub  ssh_host_rsa_key.pub</span><br><span class="line">ssh_config  ssh_host_ecdsa_key  ssh_host_ed25519_key    ssh_host_rsa_key          ssh_import_id</span><br></pre></td></tr></table></figure><p>查看是否有<em>sshd_config</em>，没有则按照如下安装<em>openssh-server</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></p><h2 id="1-2-查看公钥记录文件路径"><a href="#1-2-查看公钥记录文件路径" class="headerlink" title="1.2.查看公钥记录文件路径"></a>1.2.查看公钥记录文件路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/ssh/sshd_config</span><br><span class="line">...</span><br><span class="line"><span class="comment">#AuthorizedKeysFile     .ssh/authorized_keys</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>| 公钥被存放在 <em>.ssh/authorized_keys</em></p><h2 id="1-3-在本地端给生成公钥"><a href="#1-3-在本地端给生成公钥" class="headerlink" title="1.3.在本地端给生成公钥"></a>1.3.在本地端给生成公钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\19841\Desktop&gt; ssh-keygen.exe</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (C:\Users\19841/.ssh/id_rsa):</span><br><span class="line">C:\Users\19841/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\19841/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\19841/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:PxKM0uO4fPWTPbfVAuXu/kW3HMpAqhaSaDj51vqlnFs 19841@LAPTOP-MC6JUP1G</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|           .  .  |</span></span><br><span class="line"><span class="string">|  o ...o  o  o   |</span></span><br><span class="line"><span class="string">| + o.o+.S. .. ..o|</span></span><br><span class="line"><span class="string">|  + .+..+o  ooo.=|</span></span><br><span class="line"><span class="string">|   o...E..oo ooo+|</span></span><br><span class="line"><span class="string">|  ..o.B  .+.o..o.|</span></span><br><span class="line"><span class="string">|   .+B.    . ++o.|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">PS C:\Users\19841&gt; cd .ssh</span></span><br><span class="line"><span class="string">PS C:\Users\19841\.ssh&gt; ls</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    目录: C:\Users\19841\.ssh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mode                 LastWriteTime         Length Name</span></span><br><span class="line"><span class="string">----                 -------------         ------ ----</span></span><br><span class="line"><span class="string">-a----          2021/8/8     16:57           2610 id_rsa</span></span><br><span class="line"><span class="string">-a----          2021/8/8     16:57            576 id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>| 其中公钥被存放在<em>id_rsa.pub</em>中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span> <span class="comment"># 其它命令说明</span></span><br></pre></td></tr></table></figure></p><blockquote><p>代码参数含义：<br>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。</p><h2 id="1-4-将公钥-id-rsa-pub-的内容存放在-ssh-authorized-key-中"><a href="#1-4-将公钥-id-rsa-pub-的内容存放在-ssh-authorized-key-中" class="headerlink" title="1.4.将公钥 id_rsa.pub 的内容存放在 .ssh/authorized_key 中"></a>1.4.将公钥 <em>id_rsa.pub</em> 的内容存放在 <em>.ssh/authorized_key</em> 中</h2></blockquote><h1 id="2-连接"><a href="#2-连接" class="headerlink" title="2.连接"></a>2.连接</h1><h2 id="2-1-使用ssh命令连接"><a href="#2-1-使用ssh命令连接" class="headerlink" title="2.1.使用ssh命令连接"></a>2.1.使用ssh命令连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@主机IP</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux的基本使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
